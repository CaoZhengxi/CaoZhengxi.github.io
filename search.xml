<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring Boot annotation complete works</title>
      <link href="/2019/07/28/20190728-Spring-Boot-annotation-complete-works/"/>
      <url>/2019/07/28/20190728-Spring-Boot-annotation-complete-works/</url>
      
        <content type="html"><![CDATA[<p>1、Spring Web MVC 与 Spring Bean 注解  </p><p>1-1、Spring Web MVC 注解</p><p>1-1-1、@RequestMapping</p><p>@RequestMapping 注解的主要用途是将 Web 请求与请求处理类中的方法进行映射。Spring MVC 和 Spring WebFlux 都通过 RquestMappingHandlerMapping 和 RequestMappingHndlerAdapter 两个类来提供对 @RequestMapping 注解的支持。</p><p>@RequestMapping 注解对请求处理类中的请求处理方法进行标注；@RequestMapping 注解拥有以下的六个配置属性：</p><ul><li><p>value: 映射的请求 URL 或者其别名</p></li><li><p>method: 兼容 HTTP 的方法名</p></li><li><p>params: 根据 HTTP 参数的存在、缺省或值对请求进行过滤</p></li><li><p>header: 根据 HTTP Header 的存在、缺省或值对请求进行过滤</p></li><li><p>consume: 设定在 HTTP 请求正文中允许使用的媒体类型</p></li><li><p>product: 在 HTTP 响应体中允许使用的媒体类型</p></li></ul><blockquote><p>提示：在使用 @RequestMapping 之前，请求处理类还需要使用 @Controller 或 @RestController 进行标记</p></blockquote><p>下面是使用 @RequestMapping 的两个示例：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy88eWL4s7KLsKMapI2kScAhEnU2BOVPibdoQao7AHzKAtrMSjRLaGBVbg/640?wx_fmt=png" alt></p><p>@RequestMapping 还可以对类进行标记，这样类中的处理方法在映射请求路径时，会自动将类上 @RequestMapping 设置的 value 拼接到方法中映射路径之前，如下：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy8JPhzEkBsmptyOtjrFOqygWf02k9pIulG1yTibrbp01Cn1xgQD8icmHjA/640?wx_fmt=png" alt></p><p>1-1-2、@RequestBody</p><p>@RequestBody 在处理请求方法的参数列表中使用，它可以将请求主体中的参数绑定到一个对象中，请求主体参数是通过 HttpMessageConverter 传递的，根据请求主体中的参数名与对象的属性名进行匹配并绑定值。此外，还可以通过 @Valid 注解对请求主体中的参数进行校验。下面是一个使用 @RequestBody 的示例：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy8JKoX9FqYWOlhicibUfwAsUvbDRzpoE9mMhCgwkOiciaUlkVf7diaV4eoVSg/640?wx_fmt=png" alt></p><p>1-1-3、@GetMapping</p><p>@GetMapping 注解用于处理 HTTP GET 请求，并将请求映射到具体的处理方法中。具体来说，@GetMapping 是一个组合注解，它相当于是 @RequestMapping(method=RequestMethod.GET) 的快捷方式。下面是 @GetMapping 的一个使用示例：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy8g4iawTpeamqT87WooGEQS2YrFnrCKxCSYn49XRTDYhiaPJF09xdOOxUA/640?wx_fmt=png" alt></p><p>1-1-4、@PostMapping</p><p>@PostMapping 注解用于处理 HTTP POST 请求，并将请求映射到具体的处理方法中。@PostMapping 与 @GetMapping 一样，也是一个组合注解，它相当于是 @RequestMapping(method=HttpMethod.POST) 的快捷方式。下面是使用 @PostMapping 的一个示例：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy8JKoX9FqYWOlhicibUfwAsUvbDRzpoE9mMhCgwkOiciaUlkVf7diaV4eoVSg/640?wx_fmt=png" alt></p><p>1-1-5、@PutMapping</p><p>@PutMapping 注解用于处理 HTTP PUT 请求，并将请求映射到具体的处理方法中，@PutMapping 是一个组合注解，相当于是 @RequestMapping(method=HttpMethod.PUT) 的快捷方式。下面是使用 @PutMapping 的一个示例：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy8ZfQHCtIhhZT3x78xU5QMCNxQiapr4eIuSl1A6FS78zJL2zVXsbMesgA/640?wx_fmt=png" alt></p><p>1-1-6、@DeleteMapping</p><p>@DeleteMapping 注解用于处理 HTTP DELETE 请求，并将请求映射到删除方法中。@DeleteMapping 是一个组合注解，它相当于是 @RequestMapping(method=HttpMethod.DELETE) 的快捷方式。下面是使用 @DeleteMapping 的一个示例：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy8UdUpcK7FEESltM7Pr9Rr5BLYBnlTnnV7r35MricGE99aHLGtVfc6VSg/640?wx_fmt=png" alt></p><p>1-1-7、@PatchMapping</p><p>@PatchMapping 注解用于处理 HTTP PATCH 请求，并将请求映射到对应的处理方法中。@PatchMapping 相当于是 @RequestMapping(method=HttpMethod.PATCH) 的快捷方式。下面是一个简单的示例：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy8IltAHSp6iclb142uOYAtYGTAKejEaV4aPnpxfgIeut9icdgoINibGCVng/640?wx_fmt=png" alt></p><p>1-1-8、@ControllerAdvice</p><p>@ControllerAdvice 是 @Component 注解的一个延伸注解，Spring 会自动扫描并检测被 @ControllerAdvice 所标注的类。@ControllerAdvice 需要和 @ExceptionHandler、@InitBinder 以及 @ModelAttribute 注解搭配使用，主要是用来处理控制器所抛出的异常信息。首先，我们需要定义一个被 @ControllerAdvice 所标注的类，在该类中，定义一个用于处理具体异常的方法，并使用 @ExceptionHandler 注解进行标记。此外，在有必要的时候，可以使用 @InitBinder 在类中进行全局的配置，还可以使用 @ModelAttribute 配置与视图相关的参数。使用 @ControllerAdvice 注解，就可以快速的创建统一的，自定义的异常处理类。下面是一个使用 @ControllerAdvice 的示例代码：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy8ciaibxYvqGFrl49s6xaIKqO2x6kaxDLHQgwbm3d0VricWGyngTgIxbiaRQ/640?wx_fmt=png" alt></p><p>1-1-9、@ResponseBody</p><p>@ResponseBody 会自动将控制器中方法的返回值写入到 HTTP 响应中。特别的，@ResponseBody 注解只能用在被 @Controller 注解标记的类中。如果在被 @RestController 标记的类中，则方法不需要使用 @ResponseBody 注解进行标注。@RestController 相当于是 @Controller 和 @ResponseBody 的组合注解。下面是使用该注解的一个示例：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy8UoQ4QgyaTFtIvmaEyibMCcMnloXpEJSlVSJsk68SbEBao9xKoiaw37fw/640?wx_fmt=png" alt></p><p>1-1-10、@ExceptionHandler</p><p>@ExceptionHander 注解用于标注处理特定类型异常类所抛出异常的方法。当控制器中的方法抛出异常时，Spring 会自动捕获异常，并将捕获的异常信息传递给被 @ExceptionHandler 标注的方法。下面是使用该注解的一个示例：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy8TibAgbve1DW0UuEc876wh3GQhHDVlzVshC3Ad28lmxeUxnBDj8xzDow/640?wx_fmt=png" alt></p><p>1-1-11、@ResponseStatus</p><p>@ResponseStatus 注解可以标注请求处理方法。使用此注解，可以指定响应所需要的 HTTP STATUS。特别地，我们可以使用 HttpStauts 类对该注解的 value 属性进行赋值。下面是使用 @ResponseStatus 注解的一个示例：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy8u09QCj1YKibSPkYJ4VhSItw3Ywc2QvPCQw8AzLhb6KpqtTnAia5JxxaA/640?wx_fmt=png" alt></p><p>1-1-12、@PathVariable</p><p>@PathVariable 注解是将方法中的参数绑定到请求 URI 中的模板变量上。可以通过 @RequestMapping 注解来指定 URI 的模板变量，然后使用 @PathVariable 注解将方法中的参数绑定到模板变量上。特别地，@PathVariable 注解允许我们使用 value 或 name 属性来给参数取一个别名。下面是使用此注解的一个示例：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy8EmU80j5UgtO484tTCXDSK683J30Gl1VO3YNJQwvic2et2TUXdzWTysw/640?wx_fmt=png" alt></p><p>模板变量名需要使用 “{}” 进行包裹，如果方法的参数名与 URI 模板变量名一致，则在 @PathVariable 中就可以省略别名的定义。下面是一个简写的示例：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy86XCpSJxicBkkbb6DcjTVEGdIibTrZNpmBosBLGSXhqslfFgQr7xibapuw/640?wx_fmt=png" alt></p><blockquote><p>提示：如果参数是一个非必须的，可选的项，则可以在 @PathVariable 中设置 require = false</p></blockquote><p>1-1-13、@RequestParam</p><p>@RequestParam 注解用于将方法的参数与 Web 请求的传递的参数进行绑定。使用 @RequestParam 可以轻松的访问 HTTP 请求参数的值。下面是使用该注解的代码示例：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy81XN9tztjDxhpcD9MLOUGxBcfn1f4mw9cM9APADWGHGKU6W1XhR0QQA/640?wx_fmt=png" alt></p><p>该注解的其他属性配置与 @PathVariable 的配置相同，特别的，如果传递的参数为空，还可以通过 defaultValue 设置一个默认值。示例代码如下：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy810szTibtjwlAp9FCLic4wnKEMzRNrWRvvTia6YaD68fA0DVUDkeFEKtbw/640?wx_fmt=png" alt></p><p>1-1-14、@Controller</p><p>@Controller 是 @Component 注解的一个延伸，Spring 会自动扫描并配置被该注解标注的类。此注解用于标注 Spring MVC 的控制器。下面是使用此注解的示例代码：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy8JyLicRAzxVqWS1XL5iabZdQtg1FbQ73iaa9qibAVg8IyoVZuwAIiag4rsFg/640?wx_fmt=png" alt></p><p>1-1-15、@RestController</p><p>@RestController 是在 Spring 4.0 开始引入的，这是一个特定的控制器注解。此注解相当于 @Controller 和 @ResponseBody 的快捷方式。当使用此注解时，不需要再在方法上使用 @ResponseBody 注解。下面是使用此注解的示例代码：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy8htf9b2P5V05Oj3gYjZbVWCIsbsQWtw4JtTElpwVjaiaH4OGloOQ82Zw/640?wx_fmt=png" alt></p><p>1-1-16、@ModelAttribute</p><p>通过此注解，可以通过模型索引名称来访问已经存在于控制器中的 model。下面是使用此注解的一个简单示例：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy8gSdVSXpIEnU06lFP7EA7xhQcqZ1EZVTn1zhvGicTqUgEjsa6IcTB2tg/640?wx_fmt=png" alt></p><p>与 @PathVariable 和 @RequestParam 注解一样，如果参数名与模型具有相同的名字，则不必指定索引名称，简写示例如下：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy8b1iaR0WicsiaacNXVTVjxYozEbcuTib9PYNC2ib3g7PHS8aznOp2iajaOXGA/640?wx_fmt=png" alt></p><p>特别地，如果使用 @ModelAttribute 对方法进行标注，Spring 会将方法的返回值绑定到具体的 Model 上。示例如下：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy8CNo2q77MRQZrK3pfSsGjGuGsKSkPwRaXJ1fSeBDwRcXdekdHyH4hDw/640?wx_fmt=png" alt></p><p>在 Spring 调用具体的处理方法之前，被 @ModelAttribute 注解标注的所有方法都将被执行。</p><p>1-1-17、@CrossOrigin</p><p>@CrossOrigin 注解将为请求处理类或请求处理方法提供跨域调用支持。如果我们将此注解标注类，那么类中的所有方法都将获得支持跨域的能力。使用此注解的好处是可以微调跨域行为。使用此注解的示例如下：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy87GY5jNqWzu4a2GSmjM2uF4dxiaL3ytA4Xba0rAwDM3SyjPbDgd3sfgw/640?wx_fmt=png" alt></p><p>1-1-18、@InitBinder</p><p>@InitBinder 注解用于标注初始化 WebDataBinider 的方法，该方法用于对 Http 请求传递的表单数据进行处理，如时间格式化、字符串处理等。下面是使用此注解的示例：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy8Ysx3uXbRVyQTQsd24cCNUy4f0t9iaGmZXEoaRfxxvbFY9S3EQeAPgMQ/640?wx_fmt=png" alt></p><p>1-2、Spring Bean 注解</p><p>在本小节中，主要列举与 Spring Bean 相关的 4 个注解以及它们的使用方式。</p><p>1-2-1、@ComponentScan</p><p>@ComponentScan 注解用于配置 Spring 需要扫描的被组件注解注释的类所在的包。可以通过配置其 basePackages 属性或者 value 属性来配置需要扫描的包路径。value 属性是 basePackages 的别名。此注解的用法如下：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy89PTibmDWPZJHj1AlZ5mibPbuhSianOjico3yIiagTfiaxEwU1nlKwwm1U6XA/640?wx_fmt=png" alt></p><p>1-2-2、@Component</p><p>@Component 注解用于标注一个普通的组件类，它没有明确的业务范围，只是通知 Spring 被此注解的类需要被纳入到 Spring Bean 容器中并进行管理。此注解的使用示例如下：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy874DzSJE3OjKrWWe99VNWlAofjVRawnSDaBicTnMEKURzlmpibadtkkmg/640?wx_fmt=png" alt></p><p>1-2-3、@Service</p><p>@Service 注解是 @Component 的一个延伸（特例），它用于标注业务逻辑类。与 @Component 注解一样，被此注解标注的类，会自动被 Spring 所管理。下面是使用 @Service 注解的示例：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy8I96erlicxb8kf8MXkHk1yNQ3IARXDPEcxoPxy7rUh0VOq9IJibJXOCibg/640?wx_fmt=png" alt></p><p>1-2-4、@Repository</p><p>@Repository 注解也是 @Component 注解的延伸，与 @Component 注解一样，被此注解标注的类会被 Spring 自动管理起来，@Repository 注解用于标注 DAO 层的数据持久化类。此注解的用法如下：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy8UD2O0KrsxDbQWVrJzEL9VYJyTJ94BljDfO9sBllXXlkv0ONib29XtFg/640?wx_fmt=png" alt></p><p>2、Spring Dependency Inject 与 Bean Scops 注解</p><p>2-1、Spring DI 注解</p><p>2-1-1、@DependsOn</p><p>@DependsOn 注解可以配置 Spring IoC 容器在初始化一个 Bean 之前，先初始化其他的 Bean 对象。下面是此注解使用示例代码：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy80AcKib9N2EEFDviblSNV0yetiaPYibb0HvM5jENvoiaZkl4GibLtmQnrBR8A/640?wx_fmt=png" alt></p><p>2-1-2、@Bean</p><p>@Bean 注解主要的作用是告知 Spring，被此注解所标注的类将需要纳入到 Bean 管理工厂中。@Bean 注解的用法很简单，在这里，着重介绍 @Bean 注解中 initMethod 和 destroyMethod 的用法。示例如下：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy8MpkSmvsEg0FghP25nkSjbzlpRLbZr2y1kyFvrQCCHm9XkicPaOcmAibw/640?wx_fmt=png" alt></p><p>2-2、Scops 注解</p><p>2-2-1、@Scope</p><p>@Scope 注解可以用来定义 @Component 标注的类的作用范围以及 @Bean 所标记的类的作用范围。@Scope 所限定的作用范围有：singleton、prototype、request、session、globalSession 或者其他的自定义范围。这里以 prototype 为例子进行讲解。当一个 Spring Bean 被声明为 prototype（原型模式）时，在每次需要使用到该类的时候，Spring IoC 容器都会初始化一个新的改类的实例。在定义一个 Bean 时，可以设置 Bean 的 scope 属性为 prototype：scope=“prototype”, 也可以使用 @Scope 注解设置，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Scope(value=ConfigurableBeanFactory.SCOPE_PROPTOTYPE)</span><br></pre></td></tr></table></figure><p>下面将给出两种不同的方式来使用 @Scope 注解，示例代码如下：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy8Sice9wevibF4Y4MxrQ9OU4FcUyzYvEavEwbB3haqYicaHdDibWFGQz2gDA/640?wx_fmt=png" alt></p><p>2-2-2、@Scope 单例模式</p><p>当 @Scope 的作用范围设置成 Singleton 时，被此注解所标注的类只会被 Spring IoC 容器初始化一次。在默认情况下，Spring IoC 容器所初始化的类实例都为 singleton。同样的原理，此情形也有两种配置方式，示例代码如下：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy8LO0G1XAplsf5lzP9kvLx5nZUzhzVaNLniaZqqEK69GktjrMibRCIibLxg/640?wx_fmt=png" alt></p><p>3、容器配置注解</p><p>3-1、@Autowired</p><p>@Autowired 注解用于标记 Spring 将要解析和注入的依赖项。此注解可以作用在构造函数、字段和 setter 方法上。</p><p>3-1-1、作用于构造函数</p><p>下面是 @Autowired 注解标注构造函数的使用示例：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy8vWicCaUibvfPBgiaF9HQOIHXjtkm9Y6TPzQu1K7TpVzb17JkIUmNVcPMQ/640?wx_fmt=png" alt></p><p>3-1-2、作用于 setter 方法</p><p>下面是 @Autowired 注解标注 setter 方法的示例代码：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy87y82OZtx9znzJltWet1F9X24vA8KZ68nHz8VgJj0ibzanahI1pbexQg/640?wx_fmt=png" alt></p><p>3-1-3、作用于字段</p><p>@Autowired 注解标注字段是最简单的，只需要在对应的字段上加入此注解即可，示例代码如下：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy89wicqA8zOc6JrMcGZ0xehq8bDjic4Me56lNoGrOAIdrs3DpEOnSIBmkQ/640?wx_fmt=png" alt></p><p>3-2、@Primary</p><p>当系统中需要配置多个具有相同类型的 bean 时，@Primary 可以定义这些 Bean 的优先级。下面将给出一个实例代码来说明这一特性：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy8YZgxB5UVG34uNwUSE4OXRI5Q6FGZSiavSH8NTfHNvSMZGPj5s7zL3ibg/640?wx_fmt=png" alt></p><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this is send DingDing method message.</span><br></pre></td></tr></table></figure><p>3-3、@PostConstruct 与 @PreDestroy</p><p>值得注意的是，这两个注解不属于 Spring, 它们是源于 JSR-250 中的两个注解，位于 common-annotations.jar 中。@PostConstruct 注解用于标注在 Bean 被 Spring 初始化之前需要执行的方法。@PreDestroy 注解用于标注 Bean 被销毁前需要执行的方法。下面是具体的示例代码：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy8P7bBecW8qGS1DM04dVtxUxVLQP38WdTtETbRndqmXqeglEsATJSolg/640?wx_fmt=png" alt></p><p>3-4、@Qualifier</p><p>当系统中存在同一类型的多个 Bean 时，@Autowired 在进行依赖注入的时候就不知道该选择哪一个实现类进行注入。此时，我们可以使用 @Qualifier 注解来微调，帮助 @Autowired 选择正确的依赖项。下面是一个关于此注解的代码示例：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WwPkUCFX4x4pAz1mTJUficunt5ZTb6Fy8Z8tvhGa98pgccdeibMbr0QzibLfK8Vib2ZuuP9TyoV2icmicuNQH7akKgzw/640?wx_fmt=png" alt></p><p>4、Spring Boot 注解</p><p>4-1、@SpringBootApplication</p><p>@SpringBootApplication 注解是一个快捷的配置注解，在被它标注的类中，可以定义一个或多个 Bean，并自动触发自动配置 Bean 和自动扫描组件。此注解相当于 @Configuration、@EnableAutoConfiguration 和 @ComponentScan 的组合。在 Spring Boot 应用程序的主类中，就使用了此注解。示例代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">public class Application&#123;</span><br><span class="line">public static void main(String [] args)&#123;</span><br><span class="line">SpringApplication.run(Application.class,args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4-2、@EnableAutoConfiguration</p><p>@EnableAutoConfiguration 注解用于通知 Spring，根据当前类路径下引入的依赖包，自动配置与这些依赖包相关的配置项。</p><p>4-3、@ConditionalOnClass 与 @ConditionalOnMissingClass</p><p>这两个注解属于类条件注解，它们根据是否存在某个类作为判断依据来决定是否要执行某些配置。下面是一个简单的示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@ConditionalOnClass(DataSource.class)</span><br><span class="line">class MySQLAutoConfiguration &#123;</span><br><span class="line">//...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4-4、@ConditionalOnBean 与 @ConditionalOnMissingBean</p><p>这两个注解属于对象条件注解，根据是否存在某个对象作为依据来决定是否要执行某些配置方法。示例代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">@ConditionalOnBean()</span><br><span class="line">LocalContainerEntityManagerFactoryBean entityManagerFactory()&#123;</span><br><span class="line">//...</span><br><span class="line">&#125;</span><br><span class="line">@Bean</span><br><span class="line">@ConditionalOnMissingBean</span><br><span class="line">public MyBean myBean()&#123;</span><br><span class="line">//...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4-5、@ConditionalOnProperty</p><p>@ConditionalOnProperty 注解会根据 Spring 配置文件中的配置项是否满足配置要求，从而决定是否要执行被其标注的方法。示例代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">@ConditionalOnProperty()</span><br><span class="line">Alipay alipay()&#123;</span><br><span class="line">return new Alipay();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4-6、@ConditionalOnResource</p><p>此注解用于检测当某个配置文件存在使，则触发被其标注的方法，下面是使用此注解的代码示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@ConditionalOnResource(resources = &quot;classpath:website.properties&quot;)</span><br><span class="line">Properties addWebsiteProperties()&#123;</span><br><span class="line">//...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4-7、@ConditionalOnWebApplication 与 @ConditionalOnNotWebApplication</p><p>这两个注解用于判断当前的应用程序是否是 Web 应用程序。如果当前应用是 Web 应用程序，则使用 Spring WebApplicationContext, 并定义其会话的生命周期。下面是一个简单的示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@ConditionalOnWebApplication</span><br><span class="line">HealthCheckController healthCheckController()&#123;</span><br><span class="line">//...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4-8、@ConditionalExpression</p><p>此注解可以让我们控制更细粒度的基于表达式的配置条件限制。当表达式满足某个条件或者表达式为真的时候，将会执行被此注解标注的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">@ConditionalException(&quot;$&#123;localstore&#125; &amp;&amp; $&#123;local == &apos;true&apos;&#125;&quot;)</span><br><span class="line">LocalFileStore store()&#123;</span><br><span class="line">//...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4-9、@Conditional</p><p>@Conditional 注解可以控制更为复杂的配置条件。在 Spring 内置的条件控制注解不满足应用需求的时候，可以使用此注解定义自定义的控制条件，以达到自定义的要求。下面是使用该注解的简单示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Conditioanl(CustomConditioanl.class)</span><br><span class="line">CustomProperties addCustomProperties()&#123;</span><br><span class="line">//...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>原文地址 <a href="https://mp.weixin.qq.com/s/VIIhVWYHsgqYdW5QClPzDw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/VIIhVWYHsgqYdW5QClPzDw</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Annotation </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot @ConfigurationProperties and @value</title>
      <link href="/2019/07/28/20190728-SpringBoot-ConfigurationProperties-and-Value/"/>
      <url>/2019/07/28/20190728-SpringBoot-ConfigurationProperties-and-Value/</url>
      
        <content type="html"><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h3><p>SpringBoot 使用一个全局的配置文件，配置文件名是固定的；当我们创建一个项目时会在 resource 目录下出现一个默认的配置文件<code>application.properties</code> 我们可以在里面进行一些参数的配置，当然还有另外一种方式 yml 文件<code>application.yml</code>（YAML Ain’t Markup Language）, 他们之间写法不同，作用都是一样的，下面我们就来进行学习，可以根据自己的爱好进行选择。</p><p>配置文件的作用：修改 SpringBoot 自动配置的默认值；SpringBoot 在底层都给我们自动配置好；</p><p>我们写一个简单的例子看看它们之间的区别：配置端口号</p><ul><li>application.properties</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=8081</span><br></pre></td></tr></table></figure><ul><li>application.yaml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure><p>那如果是以前的 xml 呢？</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以前的配置文件；大多都使用的是 <strong>xxxx.xml</strong> 文件；而 YAML：<strong>以数据为中心</strong>，比 json、xml 等更适合做配置文件；但是刚开始使用的时候一定要注意语法问题，一不小心少个空格就会报错哈。</p><h3 id="2-YML-语法"><a href="#2-YML-语法" class="headerlink" title="2 YML 语法"></a>2 YML 语法</h3><h5 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h5><p>k:(空格)v：表示一对键值对 <strong>（空格必须有）</strong>；</p><p>以<strong>空格</strong>的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的，空格可以是一个或者多个，但是同一层级一定要对齐。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure><p><strong>属性和值也是大小写敏感；</strong></p><h5 id="2、值的写法"><a href="#2、值的写法" class="headerlink" title="2、值的写法"></a>2、值的写法</h5><h5 id="字面量：普通的值（数字，字符串，布尔）"><a href="#字面量：普通的值（数字，字符串，布尔）" class="headerlink" title="字面量：普通的值（数字，字符串，布尔）"></a>字面量：普通的值（数字，字符串，布尔）</h5><p> k: v：字面直接来写；</p><p>字符串默认不用加上单引号或者双引号；</p><ul><li><p>“”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思<br>name: “zhangsan \n lisi”：输出；zhangsan 换行 lisi</p></li><li><p>‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据<br>name: ‘zhangsan \n lisi’：输出；zhangsan \n lisi</p></li></ul><h5 id="对象、Map（属性和值）（键值对）："><a href="#对象、Map（属性和值）（键值对）：" class="headerlink" title="对象、Map（属性和值）（键值对）："></a>对象、Map（属性和值）（键值对）：</h5><p> k: v：在下一行来写对象的属性和值的关系；注意缩进</p><p> 对象还是 k: v 的方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>行内写法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span> <span class="string">&#123;name:</span> <span class="string">zhangsan,age:</span> <span class="number">18</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="数组（List、Set）："><a href="#数组（List、Set）：" class="headerlink" title="数组（List、Set）："></a>数组（List、Set）：</h5><p>用 - 值表示数组中的一个元素</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">cat</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">dog</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span> <span class="string">[cat,dog,pig]</span></span><br></pre></td></tr></table></figure><h3 id="3-通过配置文件注入属性-ConfigurationProperties"><a href="#3-通过配置文件注入属性-ConfigurationProperties" class="headerlink" title="3 通过配置文件注入属性 @ConfigurationProperties"></a>3 通过配置文件注入属性 @ConfigurationProperties</h3><ul><li>person 实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.zhangyu.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment"> *      prefix = "person"：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；</span></span><br><span class="line"><span class="comment"> * 所以配置<span class="doctag">@Component</span>注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//人的属性</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//map</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String , Object&gt; maps;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//list</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Dog&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getMaps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaps</span><span class="params">(Map&lt;String, Object&gt; maps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maps = maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dog&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;Dog&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDog</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">" + name + '\'' +</span></span><br><span class="line"><span class="string">                "</span>, age=<span class="string">" + age +</span></span><br><span class="line"><span class="string">                "</span>, sex=<span class="string">'" + sex + '</span>\<span class="string">''</span> +</span><br><span class="line">                <span class="string">", maps="</span> + maps +</span><br><span class="line">                <span class="string">", list="</span> + list +</span><br><span class="line">                <span class="string">", dog="</span> + dog +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Dog 实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.zhangyu.bean;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Dog&#123;"</span> +</span><br><span class="line">                <span class="string">" + name + '\'' +</span></span><br><span class="line"><span class="string">                "</span>, age=<span class="string">" + age +</span></span><br><span class="line"><span class="string">                '&#125;';</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>yml 配置属性</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">zhangsan</span></span><br><span class="line"><span class="attr">  age:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">  sex:</span> <span class="string">male</span></span><br><span class="line"><span class="attr">  maps:</span> <span class="string">&#123;k1:</span> <span class="string">v1,k2:</span> <span class="string">v2&#125;</span></span><br><span class="line"><span class="attr">  list:</span></span><br><span class="line"><span class="bullet">   -</span> <span class="string">&#123;name:</span> <span class="string">小黑,</span> <span class="attr">age:</span> <span class="number">22</span><span class="string">&#125;</span></span><br><span class="line"><span class="attr">   - name:</span> <span class="string">小白</span></span><br><span class="line"><span class="attr">   - age:</span> <span class="number">33</span></span><br><span class="line"><span class="attr">  dog:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">大黄</span></span><br><span class="line"><span class="attr">    age:</span> <span class="number">12</span></span><br></pre></td></tr></table></figure><ul><li>下面通过 test 类进行测试结果</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.zhangyu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.zhangyu.bean.Person;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Springboot1ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(person);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果</strong> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person&#123;name=<span class="string">'zhangsan'</span>, age=<span class="number">20</span>, sex=<span class="string">'male'</span>, maps=&#123;k1=v1, k2=v2&#125;, list=[Dog&#123;name=<span class="string">'小黑'</span>, age=<span class="number">22</span>&#125;, Dog&#123;name=<span class="string">'小白'</span>, age=<span class="number">0</span>&#125;, Dog&#123;name=<span class="string">'null'</span>, age=<span class="number">33</span>&#125;], dog=Dog&#123;name=<span class="string">'大黄'</span>, age=<span class="number">12</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>其中 list 中放入的是 dog 类，我们看看结果是什么样的：list 张放入了三只狗，dog 中如果有多个属性就要用 { } 括起来。</p><ul><li>properties 配置文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">person.name=小明</span><br><span class="line">person.age=20</span><br><span class="line">person.sex=male</span><br><span class="line"></span><br><span class="line">person.maps.k1=v1</span><br><span class="line">person.maps.k2=v2</span><br><span class="line"></span><br><span class="line">person.list[0].name=小顾</span><br><span class="line">person.list[0].age=22</span><br><span class="line"></span><br><span class="line">person.list[1].name=旺财</span><br><span class="line">person.list[1].age=10</span><br><span class="line"></span><br><span class="line">person.dog.name=旺旺</span><br><span class="line">person.dog.age=30</span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person&#123;name=<span class="string">'小明'</span>, age=<span class="number">20</span>, sex=<span class="string">'male'</span>, maps=&#123;k1=v1, k2=v2&#125;, list=[Dog&#123;name=<span class="string">'小顾'</span>, age=<span class="number">22</span>&#125;, Dog&#123;name=<span class="string">'旺财'</span>, age=<span class="number">10</span>&#125;], dog=Dog&#123;name=<span class="string">'旺旺'</span>, age=<span class="number">30</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 这里大家可能出现乱码问题因为 properties 配置文件在 idea 中默认 utf-8 可能会乱码，但是我们 idea 的默认设置是 gbk，所以要进行修改，如下图所示：<br><img src="https://img-blog.csdnimg.cn/20181105162035183.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1MF96aGFuZzA=,size_16,color_FFFFFF,t_70" alt></p><h3 id="3-Value-属性注入"><a href="#3-Value-属性注入" class="headerlink" title="3 @Value 属性注入"></a>3 @Value 属性注入</h3><p>我们写个简单的 controller 进行测试 @Value 属性，@Value 属性可以说增加了属性注入的灵活性可以单个属性进行配置。</p><ul><li>HelloController</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.zhangyu.bean.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;person.name&#125;"</span>)</span><br><span class="line">    <span class="comment">//@Value("#&#123;person.name&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算表达式</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;11*2&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//引入一个对象</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;person&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET ,path = <span class="string">"/sayHello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello "</span>+ name+<span class="string">" 我的年龄是： "</span>+age+<span class="string">"\n"</span> + person;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>yml 中加一个 name 属性</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">person.name:</span> <span class="string">小雨</span></span><br></pre></td></tr></table></figure><ul><li>看看结果<br>访问页面<code>http://localhost:8081/sayHello</code>我这里端口号配置的是 8081<br>结果:<code>hello 小明 我的年龄是： 22</code></li></ul><p><strong>这里 @Value 注解是支持 SpEL 的。</strong></p><h5 id="什么是-SpEL？"><a href="#什么是-SpEL？" class="headerlink" title="什么是 SpEL？"></a>什么是 SpEL？</h5><ol><li><p>Spring Expression Language (简称 SpEL)：是一个支持运行时查询和操作对象图的强大的表达式语言。</p></li><li><p>语法类似于 EL：SpEL 使用 #{…} 作为定界符 , 所有在大括号中的字符都将被认为是 SpEL , SpEL 为 bean 的属性进行动态赋值提供了便利。</p></li></ol><p>通过 SpEL 可以实现：</p><ul><li>通过 bean 的 id 对 bean 进行引用</li><li>调用方式以及引用对象中的属性</li><li>计算表达式的值</li><li>正则表达式的匹配</li></ul><h5 id="1SpEL-实现："><a href="#1SpEL-实现：" class="headerlink" title="1SpEL 实现："></a>1SpEL 实现：</h5><ul><li>整数：#{8}</li><li>小数：#{8.8}</li><li>科学计数法：#{1e4}</li><li>String：可以使用单引号或者双引号作为字符串的定界符号。</li><li>Boolean：#{true}</li></ul><p>SpEL引用bean , 属性和方法：</p><ul><li><p>引用其他对象:#{car}</p></li><li><p>引用其他对象的属性：#{car.brand}</p></li><li><p>调用其它方法 , 还可以链式操作：#{car.toString()}</p></li><li><p>调用静态方法静态属性：#{T(java.lang.Math).PI}</p><p>SpEL支持的运算符号：</p></li><li><p>算术运算符：+，-，*，/，%，^(加号还可以用作字符串连接)</p></li><li><p>比较运算符：&lt; , &gt; , == , &gt;= , &lt;= , lt , gt , eg , le , ge</p></li><li><p>逻辑运算符：and , or , not , |</p></li><li><p>if-else 运算符(类似三目运算符)：？:(temary), ?:(Elvis)</p></li><li><p>正则表达式：#{admin.email matches ‘[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}’}</p></li></ul><h3 id="4-Value-获取值和-ConfigurationProperties-获取值比较"><a href="#4-Value-获取值和-ConfigurationProperties-获取值比较" class="headerlink" title="4 @Value 获取值和 @ConfigurationProperties 获取值比较"></a>4 @Value 获取值和 @ConfigurationProperties 获取值比较</h3><table><thead><tr><th>注解</th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个指定</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303 数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><p><strong>松散绑定</strong> ：如果使用 @ConfigurationProperties 注解一个类其中一个属性为<br><code>private String myName;</code><br>我们通过 yml 进行配置如果我写成这样是否可以呢？</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="attr">  my-name:</span> <span class="string">zhangsan</span></span><br></pre></td></tr></table></figure><p>答案是可以的，<strong>这就是松散绑定</strong> ，我可以写成<code>my-name</code>也可以<code>myName</code><br>@ConfigurationProperties 支持而 @Vlaue 不支持</p><p><strong>JSR303 数据校验</strong>：  通过一个例子来看看什么是 JSR303 数据校验</p><ul><li>我们在 person 类中加入:<code>@Validated</code>和<code>@Email</code>两个注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.zhangyu.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Email;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//人的属性</span></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="keyword">private</span> String myName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//map</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String , Object&gt; maps;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//list</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Dog&gt; list;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMyName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> myName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyName</span><span class="params">(String myName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myName = myName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getMaps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> maps;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaps</span><span class="params">(Map&lt;String, Object&gt; maps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maps = maps;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dog&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;Dog&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDog</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"my + myName + '\'' +</span></span><br><span class="line"><span class="string">                "</span>, age=<span class="string">" + age +</span></span><br><span class="line"><span class="string">                "</span>, sex=<span class="string">'" + sex + '</span>\<span class="string">''</span> +</span><br><span class="line">                <span class="string">", maps="</span> + maps +</span><br><span class="line">                <span class="string">", list="</span> + list +</span><br><span class="line">                <span class="string">", dog="</span> + dog +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动后发现报错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Binding to target org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under <span class="string">'person'</span> to cn.zhangyu.bean.Person failed:</span><br><span class="line"></span><br><span class="line">    Property: person.myName</span><br><span class="line">    Value: zhangsan</span><br><span class="line">    Origin: class path resource [application.yml]:6:12</span><br><span class="line">    Reason: 不是一个合法的电子邮件地址</span><br></pre></td></tr></table></figure><p>这也就是 JSR303 数据校验。填写正确的电子邮件。而 @Vlaue 是不支持的。</p><p><strong>复杂类型：</strong><br>我们上面知道了 @ConfigurationProperties 是支持复杂类型的 list、map 等。 现在我们测试 @Value 是否支持</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;person.maps&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> Map&lt;String , Object&gt; maps;</span><br></pre></td></tr></table></figure><p>把 person 中 map 属性加上 @Value 注解启动发现报错;<br><code>Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder &#39;person.maps&#39; in value &quot;${person.maps}&quot;</code>. <strong>所以 @ConfigurationProperties 是支持复杂类型的 list、map 等而 @Value 是不支持的，这是非常重要的一点。</strong></p><blockquote><p>Learning notes<br>原文地址 <a href="https://blog.csdn.net/yu0_zhang0/article/details/83745056" target="_blank" rel="noopener">https://blog.csdn.net/yu0_zhang0/article/details/83745056</a> </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Annotation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2.X整合Oauth2访问时返回401 </title>
      <link href="/2019/07/21/20190721-SpringBoot-integration-Oauth2-Return-401-on-login-%E2%80%9C/"/>
      <url>/2019/07/21/20190721-SpringBoot-integration-Oauth2-Return-401-on-login-%E2%80%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="QUESTION"><a href="#QUESTION" class="headerlink" title="QUESTION"></a>QUESTION</h1><p>SpringBoot2.X整合了Oauth2访问<code>/oauth/token</code>时出现返回401 Unauthorized</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"timestamp"</span>: <span class="string">"2019-07-21T15:22:06.576+0000"</span>,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">401</span>,</span><br><span class="line">    <span class="attr">"error"</span>: <span class="string">"Unauthorized"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"Unauthorized"</span>,</span><br><span class="line">    <span class="attr">"path"</span>: <span class="string">"/oauth/token"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且Console打印<code>Encoded password does not look like BCrypt</code></p><h1 id="ANSWER"><a href="#ANSWER" class="headerlink" title="ANSWER"></a>ANSWER</h1><p>SpringBoot2.X中在设置ClientSecret时需要加密<code>secret(passwordEncoder.encode(client.getClientSecret()))</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    InMemoryClientDetailsServiceBuilder builder = clients.inMemory();</span><br><span class="line">    <span class="keyword">if</span> (ArrayUtils.isNotEmpty(securityProperties.getOauth2().getClients())) &#123;</span><br><span class="line">        <span class="keyword">for</span> (OAuth2ClientProperties client : securityProperties.getOauth2().getClients()) &#123;</span><br><span class="line">            builder.withClient(client.getClientId())</span><br><span class="line">                    .secret(passwordEncoder.encode(client.getClientSecret()))</span><br><span class="line">                    .authorizedGrantTypes(<span class="string">"refresh_token"</span>, <span class="string">"authorization_code"</span>, <span class="string">"password"</span>)</span><br><span class="line">                    .accessTokenValiditySeconds(client.getAccessTokenValidateSeconds())</span><br><span class="line">                    .refreshTokenValiditySeconds(<span class="number">2592000</span>)</span><br><span class="line">                    .scopes(<span class="string">"all"</span>)</span><br><span class="line">                    .autoApprove(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2.X </category>
          
          <category> Oauth2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2.X </tag>
            
            <tag> Oauth2 </tag>
            
            <tag> Unauthorized </tag>
            
            <tag> 401 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2.x integration swagger2</title>
      <link href="/2019/07/21/20190721-SpringBoot%20integration%20swagger2/"/>
      <url>/2019/07/21/20190721-SpringBoot%20integration%20swagger2/</url>
      
        <content type="html"><![CDATA[<h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><ul><li>SpingBoot使用的是<code>2.0.7RELEASE</code>版本</li></ul><h1 id="一、配置POM文件"><a href="#一、配置POM文件" class="headerlink" title="一、配置POM文件"></a>一、配置POM文件</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="二、配置Swagger2"><a href="#二、配置Swagger2" class="headerlink" title="二、配置Swagger2"></a>二、配置Swagger2</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Swagger配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConf</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">// 扫描有ApiOperation注解的</span></span><br><span class="line">                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class)) </span><br><span class="line">                <span class="comment">// 扫描固定包</span></span><br><span class="line">                <span class="comment">// .apis(RequestHandlerSelectors.basePackage("com.xxx.controller"))</span></span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"Swagger2 Test API"</span>)</span><br><span class="line">                .version(<span class="string">"summer"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、Controller请求添加Swagger2"><a href="#三、Controller请求添加Swagger2" class="headerlink" title="三、Controller请求添加Swagger2"></a>三、Controller请求添加Swagger2</h1><h1 id="四、访问SwaggerUI"><a href="#四、访问SwaggerUI" class="headerlink" title="四、访问SwaggerUI"></a>四、访问SwaggerUI</h1><ul><li><p>访问路径<code>http://IP:端口/swagger-ui.html</code>会出现404无法读取到静态资源，控制台显示<code>No mapping found for HTTP request with URI [/swagger-ui.html] in DispatcherServlet with name &#39;dispatcherServlet&#39;</code></p></li><li><p>Spring-boot2.X以上在集成swagger时配置WebConfig不要extends WebMvcConfigurationSupport，需要修改为最新的implements WebMvcConfigurer然后配置静态资源访问的路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomConfiguration</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置静态资源访问路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/**"</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">"classpath:/static/"</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">"swagger-ui.html"</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">"classpath:/META-INF/resources/"</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/webjars/**"</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2.x </category>
          
          <category> Swagger2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2.X </tag>
            
            <tag> Swagger2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NGINX add http_secure_link_module</title>
      <link href="/2019/07/06/20190706-NGINX-http-secure-link-module/"/>
      <url>/2019/07/06/20190706-NGINX-http-secure-link-module/</url>
      
        <content type="html"><![CDATA[<h1 id="NGINX的http-secure-link-module简单使用"><a href="#NGINX的http-secure-link-module简单使用" class="headerlink" title="NGINX的http_secure_link_module简单使用"></a>NGINX的http_secure_link_module简单使用</h1><p>环境说明：</p><ul><li>nginx安装目录<code>/usr/local/nginx</code></li><li>nginx编译安装的源码路径<code>/opt/nginx-1.16.0</code></li></ul><h2 id="一、查看已安装的NGINX配置信息"><a href="#一、查看已安装的NGINX配置信息" class="headerlink" title="一、查看已安装的NGINX配置信息"></a>一、查看已安装的NGINX配置信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -V</span><br></pre></td></tr></table></figure><p><img src="http://src.clili.top/img/20190706191013.png" alt></p><p>​    复制保存configre arguments：中的内容<code>--prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre</code></p><h2 id="二、停止正在运行的NGINX"><a href="#二、停止正在运行的NGINX" class="headerlink" title="二、停止正在运行的NGINX"></a>二、停止正在运行的NGINX</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s stop</span><br></pre></td></tr></table></figure><h2 id="三、备份NGINX"><a href="#三、备份NGINX" class="headerlink" title="三、备份NGINX"></a>三、备份NGINX</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /usr/<span class="built_in">local</span>/nginx/sbin/nginx /usr/<span class="built_in">local</span>/nginx/sbin/nginx.bak</span><br></pre></td></tr></table></figure><h2 id="四、编译前的配置"><a href="#四、编译前的配置" class="headerlink" title="四、编译前的配置"></a>四、编译前的配置</h2><p>​    在nginx源码目录下配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/nginx-1.16.0</span><br><span class="line">./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre --with-http_secure_link_module</span><br></pre></td></tr></table></figure><ul><li><code>./configure</code>后面的内容为上文复制保存的nginx配置信息，然后再补充<code>--with-http_secure_link_module</code></li></ul><h2 id="五、编译与拷贝"><a href="#五、编译与拷贝" class="headerlink" title="五、编译与拷贝"></a>五、编译与拷贝</h2><ul><li>使用<code>make</code>重新编译nginx，如果使用<code>make install</code>会替换掉<code>/usr/local/nginx</code>目录下的nginx</li><li>将<code>/opt/nginx-1.16.0/objs/nginx</code>目录下编译好的内容拷贝到<code>/usr/local/nginx/sbin/</code>目录下</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">cp /opt/nginx-1.16.0/objs/nginx /usr/local/nginx/sbin/</span><br></pre></td></tr></table></figure><h2 id="六、启动nginx并访问"><a href="#六、启动nginx并访问" class="headerlink" title="六、启动nginx并访问"></a>六、启动nginx并访问</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><ul><li><p>使用<code>ps -ef|grep nginx</code>命令查看启动成功</p><p><img src="http://src.clili.top/img/20190706191445.png" alt></p></li><li><p>使用<code>curl -v localhost</code> 查看可以访问</p><p><img src="http://src.clili.top/img/20190706191600.png" alt></p></li></ul><h2 id="七、配置ngx-http-secure-link-module"><a href="#七、配置ngx-http-secure-link-module" class="headerlink" title="七、配置ngx_http_secure_link_module"></a>七、配置ngx_http_secure_link_module</h2><p>​    配置nginx.conf文件，具体配置信息参看<a href="https://nginx.org/en/docs/http/ngx_http_secure_link_module.html" target="_blank" rel="noopener">Module ngx_http_secure_link_module</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        location /file/ &#123;</span><br><span class="line">            </span><br><span class="line">             secure_link $arg_token,$arg_expires;</span><br><span class="line">             secure_link_md5 "testSecret$secure_link_expires$uri";</span><br><span class="line"></span><br><span class="line">             if ($secure_link = "") &#123;</span><br><span class="line">                return 403;</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             if ($secure_link = "0") &#123;</span><br><span class="line">                return 410;</span><br><span class="line">             &#125;</span><br><span class="line">             </span><br><span class="line">             alias /opt/;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><p>/opt/路径下有secure.txt文件</p></li><li><p>原始文件的访问路径<a href="http://localhost/file/secure.txt" target="_blank" rel="noopener">http://localhost/file/secure.txt</a></p></li><li><p>使用安全<strong>ngx_http_secure_link_module</strong>的访问路径<a href="http://localhost/file/secure.txt?token=tgcX_v7FC6ivgXq75jJHYw&amp;expires=1562403799" target="_blank" rel="noopener">http://localhost/file/secure.txt?token=tgcX_v7FC6ivgXq75jJHYw&amp;expires=1562403799</a></p></li><li><p><code>&quot;testSecret$secure_link_expires$uri&quot;</code>中的<code>testSecret</code>自己配置，与生成请求URL中的secret要一致</p></li><li><p>URL中的token对应<code>$arg_token</code>,expires对应<code>$arg_expires</code></p></li></ul><p>检查配置文件的正确性并重新加载nginx.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx  -t -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line">/usr/local/nginx/sbin/nginx  -s reload</span><br></pre></td></tr></table></figure><h2 id="八、JAVA版生成访问URL"><a href="#八、JAVA版生成访问URL" class="headerlink" title="八、JAVA版生成访问URL"></a>八、JAVA版生成访问URL</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> url 资源的相对路径 如果请求路径为http://localhost/file/secure.txt 相对路径为/file/secure.txt</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> seconds URL的有效期秒数</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> secret 密签与nginx中配置的一致</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateToken</span><span class="params">(String url, Long seconds, String secret)</span></span>&#123;</span><br><span class="line">      <span class="comment">// 设置过期时间秒数</span></span><br><span class="line">      String time = String.valueOf(System.currentTimeMillis() / <span class="number">1000</span> + seconds);</span><br><span class="line">      <span class="comment">// 生成MD5校验码 字符串拼接的顺序要和nginx中配置的校验顺序一致 secret+time+url</span></span><br><span class="line">      <span class="keyword">byte</span>[] md5Str=DigestUtils.md5(StringUtils.join(secret,time,url));</span><br><span class="line">      String token= Base64.encodeBase64URLSafeString(md5Str);</span><br><span class="line">      <span class="keyword">return</span> StringUtils.join(url,TokenPrefix,token,ExpiresPrefix,time);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      String urlToken=generateToken(<span class="string">"/file/secure.txt"</span>,<span class="number">2L</span>,<span class="string">"testSecret"</span>);</span><br><span class="line">      System.out.println(<span class="string">"http://localhost"</span>+urlToken);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><code>byte[] md5Str=DigestUtils.md5(StringUtils.join(secret,time,url));</code>这里的<code>(secret,time,url)</code>的拼接顺序一定要和nginx.conf文件中的<code>secure_link_md5 &quot;testSecret$secure_link_expires$uri&quot;;</code>顺序一致</li><li>参数<code>url</code>是请求资源的相对路径 如果请求路径为<a href="http://localhost/file/secure.txt" target="_blank" rel="noopener">http://localhost/file/secure.txt</a> 相对路径为/file/secure.txt</li><li>参数<code>seconds</code>请求URL的有效期秒数</li><li>参数<code>secret</code>密签与nginx中配置的一致</li></ul><p>然后就可以访问啦！！！</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Install NGINX</title>
      <link href="/2019/07/06/20190706-NGINX-install%20nginx/"/>
      <url>/2019/07/06/20190706-NGINX-install%20nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="安装NGINX"><a href="#安装NGINX" class="headerlink" title="安装NGINX"></a>安装NGINX</h1><p>安装环境</p><ul><li>CentOS 7</li><li>NGINX-1.16.0</li></ul><h2 id="安装NGINX所需环境"><a href="#安装NGINX所需环境" class="headerlink" title="安装NGINX所需环境"></a>安装NGINX所需环境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel</span><br></pre></td></tr></table></figure><h2 id="安装NGINX-1"><a href="#安装NGINX-1" class="headerlink" title="安装NGINX"></a>安装NGINX</h2><p>一、下载nginx压缩包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://nginx.org/download/nginx-1.16.0.tar.gz</span><br></pre></td></tr></table></figure><p>二、解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.16.0.tar.gz</span><br></pre></td></tr></table></figure><p>三、进入解压之后的nginx文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd  nginx-1.16.0</span><br></pre></td></tr></table></figure><p>四、编译前的配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx  --with-http_stub_status_module --with-http_ssl_module --with-pcre</span><br></pre></td></tr></table></figure><ul><li><p><code>--prefix=/usr/local/nginx</code>指定NGINX安装到 /usr/local/nginx 目录下</p></li><li><p><code>--with-http-XXX</code>为nginx的模块，根据业务需求安装对应的模块</p><p>具体配置参看nginx官网的<a href="https://nginx.org/en/docs/configure.html" target="_blank" rel="noopener">Building nginx from Sources</a></p></li></ul><p>五、编译并安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>六、查看安装的nginx信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -V</span><br></pre></td></tr></table></figure><p><img src="http://src.clili.top/img/20190706191013.png" alt></p><p>七、启动nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><p>八、查看nginx是否启动</p><ul><li><p>使用<code>ps -ef|grep nginx</code>命令查看</p><p><img src="http://src.clili.top/img/20190706191445.png" alt></p></li><li><p>使用<code>curl -v localhost</code> 查看</p><p><img src="http://src.clili.top/img/20190706191600.png" alt></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chinese display scrambling in internationalized files</title>
      <link href="/2019/06/30/20190630-SpringBoot-Chinese%20display%20scrambling%20in%20internationalized%20files/"/>
      <url>/2019/06/30/20190630-SpringBoot-Chinese%20display%20scrambling%20in%20internationalized%20files/</url>
      
        <content type="html"><![CDATA[<h3 id="Question：SpringBoot中国际化Message的Properties文件中文显示乱码"><a href="#Question：SpringBoot中国际化Message的Properties文件中文显示乱码" class="headerlink" title="Question：SpringBoot中国际化Message的Properties文件中文显示乱码"></a>Question：SpringBoot中国际化Message的Properties文件中文显示乱码</h3><p><img src="http://src.clili.top/img/20190630173322.png" alt></p><h3 id="Solution："><a href="#Solution：" class="headerlink" title="Solution："></a>Solution：</h3><ul><li><p>如果使用的是Idea则设置Editor-File Encodings中的文件编码，如下图</p><p><img src="http://src.clili.top/img/20190630173734.png" alt></p></li></ul><p>⚠️文件编码改为UTF-8并要勾选Transparent native-to-ascli conversion选项</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> i18n </tag>
            
            <tag> 国际化 </tag>
            
            <tag> 乱码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github repository configuration domain</title>
      <link href="/2019/06/26/20190626-Github-repository-configuration-domain/"/>
      <url>/2019/06/26/20190626-Github-repository-configuration-domain/</url>
      
        <content type="html"><![CDATA[<h1 id="如何给GitHub的仓库配置域名通过域名访问？"><a href="#如何给GitHub的仓库配置域名通过域名访问？" class="headerlink" title="如何给GitHub的仓库配置域名通过域名访问？"></a>如何给GitHub的仓库配置域名通过域名访问？</h1><h2 id="一、域名解析"><a href="#一、域名解析" class="headerlink" title="一、域名解析"></a>一、域名解析</h2><ul><li>使用阿里云的域名解析将域名指向到Github</li></ul><p><img src="http://src.clili.top/img/20190626135336.png" alt></p><h2 id="二、GitHub仓库中配置要绑定的域名"><a href="#二、GitHub仓库中配置要绑定的域名" class="headerlink" title="二、GitHub仓库中配置要绑定的域名"></a>二、GitHub仓库中配置要绑定的域名</h2><ul><li>打开GitHub需要绑定域名的仓库</li><li>进入仓库的Settings</li><li>选择分支并设置域名</li></ul><p><img src="http://src.clili.top/img/20190626135817.png" alt></p><h2 id="可以访问了！"><a href="#可以访问了！" class="headerlink" title="可以访问了！"></a>可以访问了！</h2>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Domain </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Close FOREIGN_KEY_CHECKS when MySQL import</title>
      <link href="/2019/06/24/20190624-MySQL-Close-FOREIGN-KEY-CHECKS-when-mysql-import/"/>
      <url>/2019/06/24/20190624-MySQL-Close-FOREIGN-KEY-CHECKS-when-mysql-import/</url>
      
        <content type="html"><![CDATA[<ul><li><p>MySQL导入数据库时先关闭外键约束检测，导入完成后再打开外键约束检测</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE `DATA_BASE_NAME` DEFAULT CHARACTER SET utf8;</span><br><span class="line"></span><br><span class="line">USE `DATA_BASE_NAME`;</span><br><span class="line"></span><br><span class="line">-- CLOSE FOREIGN_KEY_CHECKS --</span><br><span class="line">SET FOREIGN_KEY_CHECKS=0;</span><br><span class="line"></span><br><span class="line">-- ----------------</span><br><span class="line">-- Table structure </span><br><span class="line">-- ----------------</span><br><span class="line"></span><br><span class="line">-- OPEN FOREIGN_KEY_CHECKS --</span><br><span class="line">SET FOREIGN_KEY_CHECKS=1;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Method of calling other scripts</title>
      <link href="/2019/06/19/20190619-Unity-Method%20of%20calling%20other%20scripts/"/>
      <url>/2019/06/19/20190619-Unity-Method%20of%20calling%20other%20scripts/</url>
      
        <content type="html"><![CDATA[<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><ol><li><p>在A脚本中定义物体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public GameObject bObj;</span><br></pre></td></tr></table></figure></li><li><p>在unity中将被调用脚本B所挂载的物体拖到<code>bObj</code>中</p></li><li><p>A脚本中使用<code>GetComponent&lt;&gt;</code>方法调用脚本B中的<code>Reward</code>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bObj.GetComponent&lt;B&gt;().Reward()</span><br></pre></td></tr></table></figure></li></ol><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><ol><li><p>定义静态变量 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static GameManager Instance &#123; get; private set; &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Awake()</code> 赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void Awake()</span><br><span class="line">&#123;</span><br><span class="line">    if (Instance == null)</span><br><span class="line">    &#123;</span><br><span class="line">        Instance = this;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        Destroy(Instance.gameObject);</span><br><span class="line">        Instance = this;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>OnDestroy()</code> 赋值为 <code>null</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void OnDestroy()</span><br><span class="line">&#123;</span><br><span class="line">    if (Instance == this</span><br><span class="line">    &#123;</span><br><span class="line">        Instance = null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Scripts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/06/15/hello-world/"/>
      <url>/2019/06/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
