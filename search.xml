<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringBoot set locale context</title>
      <link href="/2019/07/31/20190731-SpringBoot-Set-locale-context/"/>
      <url>/2019/07/31/20190731-SpringBoot-Set-locale-context/</url>
      
        <content type="html"><![CDATA[<h1 id="QUESTION"><a href="#QUESTION" class="headerlink" title="QUESTION"></a>QUESTION</h1><p>Spring Security拦截的请求都没有LocaleContext最终会使用默认的语言无法实现国际化</p><h1 id="ANSWER"><a href="#ANSWER" class="headerlink" title="ANSWER"></a>ANSWER</h1><ul><li>可以设置filter或interceptor从请求中通过自定义的参数读取</li><li>可以直接写接口进行设置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.util.WebUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.i18n.LocaleContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.i18n.SessionLocaleResolver;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.util.StringUtils.parseLocaleString;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String localeAttributeName = SessionLocaleResolver.LOCALE_SESSION_ATTRIBUTE_NAME;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 设置LocaleContext</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">  * 请求示例 http://127.0.0.1:8088/code/image?language=zh_CN</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setLocaleContext</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">     String language = request.getParameter(<span class="string">"language"</span>);</span><br><span class="line">     <span class="keyword">if</span> (StringUtils.isNotBlank(language)) &#123;</span><br><span class="line">         Locale locale = parseLocaleString(language);</span><br><span class="line">         WebUtils.setSessionAttribute(request, <span class="keyword">this</span>.localeAttributeName, locale);</span><br><span class="line">         LocaleContextHolder.setLocale(locale);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring Boot2.X </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Internationalized </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring expression language</title>
      <link href="/2019/07/28/20190728-Spring-expression-language/"/>
      <url>/2019/07/28/20190728-Spring-expression-language/</url>
      
        <content type="html"><![CDATA[<h1 id="1-文本表达式"><a href="#1-文本表达式" class="headerlink" title="1 文本表达式"></a>1 文本表达式</h1><p>文本表达式支持字符串、 日期 、 数字（正数 、 实数及十六进制数） 、 布尔类型及 null。其中的字符表达式可使用单引号来表示，形如：<code>&#39;Deniro&#39;</code>。如果表达式中包含单引号或者双引号字符，那么可以使用转义字符 <code>/</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ExpressionParser parser</span><br><span class="line">        = new SpelExpressionParser();</span><br><span class="line"></span><br><span class="line">//字符串解析</span><br><span class="line">String str = (String) parser.parseExpression(&quot;&apos;你好&apos;&quot;).getValue();</span><br><span class="line">System.out.println(str);</span><br><span class="line"></span><br><span class="line">//整型解析</span><br><span class="line">int intVal = (Integer) parser.parseExpression(&quot;0x2F&quot;).getValue();</span><br><span class="line">System.out.println(intVal);</span><br><span class="line"></span><br><span class="line">//双精度浮点型解析</span><br><span class="line">double doubleVal = (Double) parser.parseExpression(&quot;4329759E+22&quot;).getValue();</span><br><span class="line">System.out.println(doubleVal);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//布尔型解析</span><br><span class="line">boolean booleanVal = (boolean) parser.parseExpression(&quot;true&quot;).getValue();</span><br><span class="line">System.out.println(booleanVal);</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>你好<br>47<br>4.329759E28<br>true</p></blockquote><p>数字支持负数 、小数、科学记数法、八进制数和十六进制数 。 默认情况下，实数使用 <code>Double.parseDouble()</code> 进行表达式类型转换 。</p><h1 id="2-对象属性表达式"><a href="#2-对象属性表达式" class="headerlink" title="2 对象属性表达式"></a>2 对象属性表达式</h1><p>在 SpEL 中，我们可以使用对象属性路径（形如<code>类名.属性名.属性名</code>）来访问对象属性的值。</p><p>假设有一个账号类，Account.java：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class Account &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line">    private int footballCount;</span><br><span class="line">    private Friend friend;</span><br><span class="line"></span><br><span class="line">    public Account(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setFootballCount(int footballCount) &#123;</span><br><span class="line">        this.footballCount = footballCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void addFriend(Friend friend) &#123;</span><br><span class="line"></span><br><span class="line">        this.friend = friend;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getFootballCount() &#123;</span><br><span class="line">        return footballCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Friend getFriend() &#123;</span><br><span class="line">        return friend;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它包含姓名 name、足球数 footballCount 和一个朋友 friend 属性。friend 属性是一个 Friend 类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Friend &#123;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public Friend(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析对象属性表达式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//初始化对象</span><br><span class="line">Account account=new Account(&quot;Deniro&quot;);</span><br><span class="line">account.setFootballCount(10);</span><br><span class="line">account.addFriend(new Friend(&quot;Jack&quot;));</span><br><span class="line"></span><br><span class="line">//解析器</span><br><span class="line">ExpressionParser parser</span><br><span class="line">        = new SpelExpressionParser();</span><br><span class="line">//解析上下文</span><br><span class="line">EvaluationContext context=new StandardEvaluationContext(account);</span><br><span class="line"></span><br><span class="line">//获取不同类型的属性</span><br><span class="line">String ).getValue(context);</span><br><span class="line">System.out.println(name);</span><br><span class="line">int count= (Integer) parser.parseExpression(&quot;footballCount+1&quot;).getValue(context);</span><br><span class="line">System.out.println(count);</span><br><span class="line"></span><br><span class="line">//获取嵌套类中的属性</span><br><span class="line">String friend= (String) parser.parseExpression(&quot;friend.name&quot;).getValue(context);</span><br><span class="line">System.out.println(friend);</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>Deniro<br>11<br>Jack</p></blockquote><ol><li>SpEL 解析器适应力强，属性名首字母大小写均可。</li><li>解析对象表达式时，需要传入 EvaluationContext 上下文参数。</li></ol><h1 id="3-数组、List-和-Map-表达式"><a href="#3-数组、List-和-Map-表达式" class="headerlink" title="3 数组、List 和 Map 表达式"></a>3 数组、List 和 Map 表达式</h1><p>数组表达式支持 Java 创建数组的语法，形如 <code>new int[]{3,4,5}</code>，数组项之间以逗号作为分隔符。<strong>注意：</strong>目前还不支持多维数组。Map 表达式以键值对的方式来定义，形如 <code>{name:&#39;deniro&#39;,footballCount:10}</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//解析器</span><br><span class="line">ExpressionParser parser</span><br><span class="line">        = new SpelExpressionParser();</span><br><span class="line"></span><br><span class="line">//解析一维数组</span><br><span class="line">int[] oneArray = (int[]) parser.parseExpression(&quot;new int[]&#123;3,4,5&#125;&quot;).getValue();</span><br><span class="line">System.out.println(&quot;一维数组开始：&quot;);</span><br><span class="line">for (int i : oneArray) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;一维数组结束&quot;);</span><br><span class="line"></span><br><span class="line">//这里会抛出 SpelParseException</span><br><span class="line">//        int[][] twoArray = (int[][]) parser.parseExpression(&quot;new int[][]&#123;3,4,5&#125;&#123;3,4,5&#125;&quot;)</span><br><span class="line">//                .getValue();</span><br><span class="line"></span><br><span class="line">//解析 list</span><br><span class="line">List list = (List) parser.parseExpression(&quot;&#123;3,4,5&#125;&quot;).getValue();</span><br><span class="line">System.out.println(&quot;list:&quot; + list);</span><br><span class="line"></span><br><span class="line">//解析 Map</span><br><span class="line">Map map = (Map) parser.parseExpression(&quot;&#123;account:&apos;deniro&apos;,footballCount:10&#125;&quot;)</span><br><span class="line">        .getValue();</span><br><span class="line">System.out.println(&quot;map:&quot; + map);</span><br><span class="line"></span><br><span class="line">//解析对象中的 list</span><br><span class="line">final Account account = new Account(&quot;Deniro&quot;);</span><br><span class="line">Friend friend1 = new Friend(&quot;Jack&quot;);</span><br><span class="line">Friend friend2 = new Friend(&quot;Rose&quot;);</span><br><span class="line">List&lt;Friend&gt; friends = new ArrayList&lt;&gt;();</span><br><span class="line">friends.add(friend1);</span><br><span class="line">friends.add(friend2);</span><br><span class="line">account.setFriends(friends);</span><br><span class="line">EvaluationContext context = new StandardEvaluationContext(account);</span><br><span class="line">String friendName = (String) parser.parseExpression(&quot;friends[0].name&quot;)</span><br><span class="line">        .getValue(context);</span><br><span class="line">System.out.println(&quot;friendName:&quot; + friendName);</span><br></pre></td></tr></table></figure><p>从数组与 List 获取值，可以在括号内指定索引来获取，形如上例中的 <code>friends[0]</code>。Map 中可通过键名来获取，形如 <code>xxx[&#39;xxx&#39;]</code>。</p><p>输出结果：</p><blockquote><p>一维数组开始：<br>3  4<br>5  一维数组结束<br>list:[3, 4, 5]<br>map:{account=deniro, footballCount=10}<br>friendName:Jack</p></blockquote><h1 id="4-方法表达式"><a href="#4-方法表达式" class="headerlink" title="4 方法表达式"></a>4 方法表达式</h1><p>SpEL 支持调用有访问权限的方法，这些方法包括对象方法、静态方法，而且支持可变方法参数。除此之外，还可以调用 String 类型中的所有可访问方法，比如 <code>String.contains(&#39;xxx&#39;)</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">//解析器</span><br><span class="line">ExpressionParser parser</span><br><span class="line">        = new SpelExpressionParser();</span><br><span class="line"></span><br><span class="line">//调用 String 方法</span><br><span class="line">boolean isEmpty = parser.parseExpression(&quot;&apos;Hi,everybody&apos;.contains(&apos;Hi&apos;)&quot;).getValue</span><br><span class="line">        (Boolean</span><br><span class="line">                .class);</span><br><span class="line">System.out.println(&quot;isEmpty:&quot; + isEmpty);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 调用对象相关方法</span><br><span class="line"> */</span><br><span class="line">final Account account = new Account(&quot;Deniro&quot;);</span><br><span class="line">EvaluationContext context = new StandardEvaluationContext(account);</span><br><span class="line"></span><br><span class="line">//调用公开方法</span><br><span class="line">parser.parseExpression(&quot;setFootballCount(11)&quot;).getValue(context, Boolean</span><br><span class="line">        .class);</span><br><span class="line">System.out.println(&quot;getFootballCount:&quot; + account.getFootballCount());</span><br><span class="line"></span><br><span class="line">//调用私有方法，抛出 SpelEvaluationException: EL1004E: Method call: Method write() cannot be found on net.deniro.spring4.spel.Account type</span><br><span class="line">//        parser.parseExpression(&quot;write()&quot;).getValue(context,Boolean</span><br><span class="line">//                .class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//调用静态方法</span><br><span class="line">parser.parseExpression(&quot;read()&quot;).getValue(context, Boolean</span><br><span class="line">        .class);</span><br><span class="line"></span><br><span class="line">//调用待可变参数的方法</span><br><span class="line">parser.parseExpression(&quot;addFriendNames(&apos;Jack&apos;,&apos;Rose&apos;)&quot;).getValue(context, Boolean</span><br><span class="line">        .class);</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>调用对象的私有方法会抛出异常。</p><p>输出结果：</p><blockquote><p>isEmpty:true<br>getFootballCount:11<br>读书<br>friendName:Jack<br>friendName:Rose</p></blockquote><h1 id="5-操作符表达式"><a href="#5-操作符表达式" class="headerlink" title="5 操作符表达式"></a>5 操作符表达式</h1><h2 id="5-1-关系操作符"><a href="#5-1-关系操作符" class="headerlink" title="5.1 关系操作符"></a>5.1 关系操作符</h2><p>SpEL 支持 Java 标准操作符：等于、不等于、小于、小等于、大于、大等于、正则表达式和 instanceof 操作符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//解析器</span><br><span class="line">ExpressionParser parser</span><br><span class="line">        = new SpelExpressionParser();</span><br><span class="line"></span><br><span class="line">//数值比较</span><br><span class="line">boolean result=parser.parseExpression(&quot;2&gt;1&quot;).getValue(Boolean.class);</span><br><span class="line">System.out.println(&quot;2&gt;1:&quot;+result);</span><br><span class="line"></span><br><span class="line">//字符串比较</span><br><span class="line">result=parser.parseExpression(&quot;&apos;z&apos;&gt;&apos;a&apos;&quot;).getValue(Boolean.class);</span><br><span class="line">System.out.println(&quot;&apos;z&apos;&gt;&apos;a&apos;:&quot;+result);</span><br><span class="line"></span><br><span class="line">//instanceof 运算符</span><br><span class="line">result=parser.parseExpression(&quot;&apos;str&apos; instanceof T(String)&quot;).getValue(Boolean.class);</span><br><span class="line">System.out.println(&quot;&apos;str&apos; 是否为字符串 :&quot;+result);</span><br><span class="line"></span><br><span class="line">result=parser.parseExpression(&quot;1 instanceof T(Integer)&quot;).getValue(Boolean.class);</span><br><span class="line">System.out.println(&quot;1 是否为整型 :&quot;+result);</span><br><span class="line"></span><br><span class="line">//正则表达式</span><br><span class="line">result=parser.parseExpression(&quot;22 matches &apos;\\d&#123;2&#125;&apos;&quot;).getValue(Boolean.class);</span><br><span class="line">System.out.println(&quot;22 是否为两位数字 :&quot;+result);</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>2&gt;1:true<br>‘z’&gt;’a’:true<br>‘str’ 是否为字符串 :true<br>1 是否为整型 :true<br>22 是否为两位数字 :true</p></blockquote><ol><li>instanceof 操作符后面是类型表达式，格式为 <code>T(Java 包装器类型）</code>，如整型 <code>T(Integer)</code>。<strong>注意：</strong>不能使用原生类型，如果这样 <code>T(int)</code> 会返回错误的判断结果。</li><li>matches 用于定义正则表达式，之后跟着单引号包裹着的正则表达式。</li></ol><h2 id="5-2-逻辑操作符"><a href="#5-2-逻辑操作符" class="headerlink" title="5.2 逻辑操作符"></a>5.2 逻辑操作符</h2><p>逻辑操作符支持以下操作：</p><table><thead><tr><th>逻辑操作符</th><th>说明</th></tr></thead><tbody><tr><td>and 或 <code>&amp;&amp;</code></td><td>与操作</td></tr><tr><td>or 或 `</td><td></td></tr><tr><td><code>!</code></td><td>非操作</td></tr></tbody></table><p><strong>注意：</strong> 在 SpEL 中，不仅支持 Java 标准的逻辑操作符，还支持 and 与 or 关键字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//解析器</span><br><span class="line">ExpressionParser parser</span><br><span class="line">        = new SpelExpressionParser();</span><br><span class="line"></span><br><span class="line">//与操作</span><br><span class="line">boolean result=parser.parseExpression(&quot;true &amp;&amp; true&quot;).getValue(Boolean.class);</span><br><span class="line">System.out.println(&quot;与操作:&quot;+result);</span><br><span class="line"></span><br><span class="line">//或操作</span><br><span class="line">result=parser.parseExpression(&quot;true || false&quot;).getValue(Boolean.class);</span><br><span class="line">System.out.println(&quot;或操作:&quot;+result);</span><br><span class="line"></span><br><span class="line">parser.parseExpression(&quot;true or false&quot;).getValue(Boolean.class);</span><br><span class="line">System.out.println(&quot;或操作(or 关键字）:&quot;+result);</span><br><span class="line"></span><br><span class="line">//非操作</span><br><span class="line">result=parser.parseExpression(&quot;!false&quot;).getValue(Boolean.class);</span><br><span class="line">System.out.println(&quot;非操作:&quot;+result);</span><br><span class="line"></span><br><span class="line">//抛出 SpelEvaluationException: EL1001E: Type conversion problem, cannot convert from java.lang.Integer to java.lang.Boolean</span><br><span class="line">//parser.parseExpression(&quot;!0&quot;).getValue(Boolean.class);</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>与操作: true<br>或操作: true<br>或操作 (or 关键字）:true<br>非操作: true</p></blockquote><p><strong>注意：</strong>逻辑操作符前后运算结果必须是布尔类型，否则会抛出 SpelEvaluationException。</p><h2 id="5-3-运算操作符"><a href="#5-3-运算操作符" class="headerlink" title="5.3 运算操作符"></a>5.3 运算操作符</h2><p>SpEL 支持 Java 运算操作符，并遵守运算符优先级规则：</p><table><thead><tr><th>运算操作符</th><th>说明</th><th>支持的操作数类型</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td>数字、字符串或日期</td></tr><tr><td>-</td><td>减法</td><td>数字或日期</td></tr><tr><td>*</td><td>乘法</td><td>数字</td></tr><tr><td><code>/</code></td><td>除法</td><td>数字</td></tr><tr><td>%</td><td>取模</td><td>数字</td></tr><tr><td>^</td><td>指数幂</td><td>数字</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//加法运算</span><br><span class="line">Integer iResult = parser.parseExpression(&quot;2+3&quot;).getValue(Integer.class);</span><br><span class="line">System.out.println(&quot;加法运算：&quot; + iResult);</span><br><span class="line"></span><br><span class="line">String sResult = parser.parseExpression(&quot;&apos;Hi,&apos;+&apos;everybody&apos;&quot;).getValue(String.class);</span><br><span class="line">System.out.println(&quot;字符串拼接运算：&quot; + sResult);</span><br><span class="line"></span><br><span class="line">//减法运算</span><br><span class="line">iResult = parser.parseExpression(&quot;2-3&quot;).getValue(Integer.class);</span><br><span class="line">System.out.println(&quot;减法运算：&quot; + iResult);</span><br><span class="line"></span><br><span class="line">//乘法运算</span><br><span class="line">iResult = parser.parseExpression(&quot;2*3&quot;).getValue(Integer.class);</span><br><span class="line">System.out.println(&quot;乘法运算：&quot; + iResult);</span><br><span class="line"></span><br><span class="line">//除法运算</span><br><span class="line">iResult = parser.parseExpression(&quot;4/2&quot;).getValue(Integer.class);</span><br><span class="line">System.out.println(&quot;除法运算：&quot; + iResult);</span><br><span class="line"></span><br><span class="line">Double dResult = parser.parseExpression(&quot;4/2.5&quot;).getValue(Double.class);</span><br><span class="line">System.out.println(&quot;除法运算：&quot; + dResult);</span><br><span class="line"></span><br><span class="line">//求余运算</span><br><span class="line">iResult = parser.parseExpression(&quot;5%2&quot;).getValue(Integer.class);</span><br><span class="line">System.out.println(&quot;求余运算：&quot; + iResult);</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>加法运算：5<br>字符串拼接运算：Hi,everybody<br>减法运算：-1<br>乘法运算：6<br>除法运算：2<br>除法运算：1.6<br>求余运算：1</p></blockquote><h1 id="6-安全导航操作符"><a href="#6-安全导航操作符" class="headerlink" title="6 安全导航操作符"></a>6 安全导航操作符</h1><p>安全导航操作符来源于 Groovy 语言，使用它能够避免空指针异常。一般在访问对象时，需要验证该对象是否为空，使用安全导航操作符就能避免繁琐的空对象验证方法。它的格式是在获取对象属性操作符 “<code>.</code>” 之前加一个 “<code>?</code>”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">final Account account = new Account(&quot;Deniro&quot;);</span><br><span class="line">account.addFriend(new Friend(&quot;Jack&quot;));</span><br><span class="line"></span><br><span class="line">//解析器</span><br><span class="line">ExpressionParser parser</span><br><span class="line">        = new SpelExpressionParser();</span><br><span class="line">EvaluationContext context = new StandardEvaluationContext(account);</span><br><span class="line"></span><br><span class="line">String friendfriend?.name&quot;).getValue(context,String</span><br><span class="line">        .class);</span><br><span class="line">System.out.println(&quot;friendName:&quot;+friendName);</span><br><span class="line"></span><br><span class="line">//设置为 null</span><br><span class="line">account.setFriend(null);</span><br><span class="line">friendfriend?.name&quot;).getValue(context,String</span><br><span class="line">        .class);</span><br><span class="line">//打印出 null</span><br><span class="line">System.out.println(&quot;friendName:&quot; + friendName);</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>friendName:Jack<br>friendName:null</p></blockquote><p>这里会先判断 friend 对象是否为空；如果为空，则返回 “null” 字符串；否则返回需要的属性值。</p><h1 id="7-三元操作符"><a href="#7-三元操作符" class="headerlink" title="7 三元操作符"></a>7 三元操作符</h1><p>SpEL 支持标准的 Java 三元操作符：<code>&lt;表达式 1&gt;?&lt;表达式 2&gt;:&lt;表达式 3&gt;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ExpressionParser parser</span><br><span class="line">        = new SpelExpressionParser();</span><br><span class="line"></span><br><span class="line">boolean result=parser.parseExpression(&quot;(1+2) == 3?true:false&quot;).getValue(Boolean</span><br><span class="line">        .class);</span><br><span class="line">System.out.println(&quot;result:&quot;+result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>result:true</p></blockquote><h1 id="8-Elvis-操作符"><a href="#8-Elvis-操作符" class="headerlink" title="8 Elvis 操作符"></a>8 Elvis 操作符</h1><p>Elvis 操作符是在 Groovy 中使用的三元操作符简化版。</p><p>在三元操作符中，我们一般需要写两次变量名，比如下面代码段中的 title：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String title=&quot;News&quot;;</span><br><span class="line">String actualTitle=(title!=null)?title:&quot;tip&quot;;</span><br></pre></td></tr></table></figure><p>使用 Elvis 操作符后，可以将上述代码段简写为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title?:&quot;tip&quot;</span><br></pre></td></tr></table></figure><p>SpEL 支持的 Elvis 操作符格式是：<code>&lt;var&gt;?:&lt;value&gt;</code>，如果 var 变量为 null，那就取 value 值，否则就取自身的值。所以 Elvis 操作符很适合用于设置默认值。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">final Account account = new Account(&quot;Deniro&quot;);</span><br><span class="line"></span><br><span class="line">//解析器</span><br><span class="line">ExpressionParser parser</span><br><span class="line">        = new SpelExpressionParser();</span><br><span class="line">EvaluationContext context = new StandardEvaluationContext(account);</span><br><span class="line"></span><br><span class="line">String friendname?:&apos;无名&apos;&quot;).getValue(context,String</span><br><span class="line">        .class);</span><br><span class="line">System.out.println(&quot;friendName:&quot;+friendName);</span><br><span class="line"></span><br><span class="line">//设置名字为 null</span><br><span class="line">account.setName(null);</span><br><span class="line">friendname?:&apos;无名&apos;&quot;).getValue(context,String</span><br><span class="line">        .class);</span><br><span class="line">System.out.println(&quot;friendName:&quot; + friendName);</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>friendName:Deniro<br>friendName: 无名</p></blockquote><h1 id="9-赋值表达式"><a href="#9-赋值表达式" class="headerlink" title="9 赋值表达式"></a>9 赋值表达式</h1><p>可以通过赋值表达式来设置属性的值，效果等同于调用 setValue() 方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">final Account account = new Account(&quot;Deniro&quot;);</span><br><span class="line"></span><br><span class="line">//解析器</span><br><span class="line">ExpressionParser parser</span><br><span class="line">        = new SpelExpressionParser();</span><br><span class="line">EvaluationContext context = new StandardEvaluationContext(account);</span><br><span class="line"></span><br><span class="line">String ).getValue(context,String</span><br><span class="line">        .class);</span><br><span class="line">System.out.println(&quot;name:&quot;+name);</span><br></pre></td></tr></table></figure><h1 id="10-类型操作符"><a href="#10-类型操作符" class="headerlink" title="10 类型操作符"></a>10 类型操作符</h1><p>类型操作符 T 可以从类路径加载指定类名称（全限定名）所对应的 Class 的实例，格式为：<code>T(全限定类名)</code>，效果等同于 <code>ClassLoader#loadClass()</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ExpressionParser parser</span><br><span class="line">        = new SpelExpressionParser();</span><br><span class="line"></span><br><span class="line">//加载 java.lang.Integer</span><br><span class="line">Class integerClass=parser.parseExpression(&quot;T(Integer)&quot;).getValue(Class</span><br><span class="line">        .class);</span><br><span class="line">System.out.println(integerClass==java.lang.Integer.class);</span><br><span class="line"></span><br><span class="line">//加载 net.deniro.spring4.spel.Account</span><br><span class="line">Class accountClass=parser.parseExpression(&quot;T(net.deniro.spring4.spel.Account)&quot;)</span><br><span class="line">        .getValue(Class</span><br><span class="line">                .class);</span><br><span class="line">System.out.println(accountClass==net.deniro.spring4.spel.Account.class);</span><br><span class="line"></span><br><span class="line">//调用类静态方法</span><br><span class="line">double result = (double) parser.parseExpression(&quot;T(Math).abs(-2.5)&quot;).getValue();</span><br><span class="line">System.out.println(&quot;result:&quot; + result);</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>true<br>true<br>result:2.5</p></blockquote><p>我们还可以直接通过 T 操作符调用类的静态方法，格式为 <code>T(全限定类名).静态方法名</code>，比如上面例子中求某数的绝对值 <code>T(Math).abs(-2.5)</code>。</p><p>SpEL 中会使用 StandardTypeLocator#findType() 方法来加载类。 findType 方法定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public Class&lt;?&gt; findType(String typeName) throws EvaluationException &#123;</span><br><span class="line">        String nameToLookup = typeName;</span><br><span class="line">        try &#123;</span><br><span class="line">            return ClassUtils.forName(nameToLookup, this.classLoader);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (ClassNotFoundException ey) &#123;</span><br><span class="line">            // try any registered prefixes before giving up</span><br><span class="line">        &#125;</span><br><span class="line">        for (String prefix : this.knownPackagePrefixes) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                nameToLookup = prefix + &apos;.&apos; + typeName;</span><br><span class="line">                return ClassUtils.forName(nameToLookup, this.classLoader);</span><br><span class="line">            &#125;</span><br><span class="line">            catch (ClassNotFoundException ex) &#123;</span><br><span class="line">                // might be a different prefix</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        throw new SpelEvaluationException(SpelMessage.TYPE_NOT_FOUND, typeName);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol><li>尝试直接加载类。</li><li>如果找不到，则尝试从已注册的包前缀（java.lang）下加载类。所以如果需要加载的类在 java.lang 下，那么可以直接写类名。</li><li>如果都找不到，则抛出 SpelEvaluationException 异常。</li></ol><h1 id="11-创建对象操作符"><a href="#11-创建对象操作符" class="headerlink" title="11 创建对象操作符"></a>11 创建对象操作符</h1><p>可以使用 new 操作符来创建一个新对象 。 除了基本类型（如整型、布尔型等）和字符串之外，创建其它类需要指明全限定类名 (包括包路径) 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Account account=parser.parseExpression(&quot;new net.deniro.spring4.spel.Account&quot; +</span><br><span class="line">    &quot;(&apos;Deniro&apos;)&quot;).getValue(Account.class);</span><br><span class="line">System.out.println(&quot;name:&quot;+account.getName());</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>name:Deniro</p></blockquote><h1 id="12-变量表达式"><a href="#12-变量表达式" class="headerlink" title="12 变量表达式"></a>12 变量表达式</h1><p>可以通过 <code>#变量名</code> 来引用在 EvaluationContext 中定义的变量。通过 <code>EvaluationContext#setVariable(name, val)</code> 即可定义新的变量；name 表示变量名，val 表示变量值。</p><p>如果变量是集合，比如 list，那么可以通过 <code>#scores.[#this]</code> 来引用集合中的元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Account account = new Account(&quot;Deniro&quot;);</span><br><span class="line"></span><br><span class="line">ExpressionParser parser</span><br><span class="line">        = new SpelExpressionParser();</span><br><span class="line">EvaluationContext context = new StandardEvaluationContext(account);</span><br><span class="line"></span><br><span class="line">//定义一个新变量，名为 newVal</span><br><span class="line">context.setVariable(&quot;newVal&quot;, &quot;Jack&quot;);</span><br><span class="line"></span><br><span class="line">//获取变量 newVal 的值，并赋值给 User 的 name 属性</span><br><span class="line">parser.parseExpression(&quot;).getValue(context);</span><br><span class="line">System.out.println(&quot;getName:&quot; + account.getName());</span><br><span class="line"></span><br><span class="line">//this 操作符表示集合中的某个元素</span><br><span class="line">List&lt;Double&gt; scores = new ArrayList&lt;&gt;();</span><br><span class="line">scores.addAll(Arrays.asList(23.1, 82.3, 55.9));</span><br><span class="line">context.setVariable(&quot;scores&quot;, scores);//在上下文中定义 scores 变量</span><br><span class="line">List&lt;Double&gt; scoresGreat80 = (List&lt;Double&gt;) parser.parseExpression(&quot;#scores.?[#this&gt;80]&quot;)</span><br><span class="line">        .getValue(context);</span><br><span class="line">System.out.println(&quot;scoresGreat80:&quot; + scoresGreat80);</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>getName:Jack<br>scoresGreate80:[82.3]</p></blockquote><h1 id="13-集合选择表达式"><a href="#13-集合选择表达式" class="headerlink" title="13 集合选择表达式"></a>13 集合选择表达式</h1><p>可以使用选择表达式来过滤集合，从而生成一个新的符合选择条件的集合 。它的语法是 <code>?[selectionExpression]</code>。选择符合条件的结果集的第一个元素的语法为 <code>^ [selectionExpression]</code> ，选择最后一个元素的语法为 <code>$[selectionExpression]</code>。选择表达式也可应用于 Map 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//过滤 list 集合中的元素</span><br><span class="line">final StandardEvaluationContext listContext = new</span><br><span class="line">        StandardEvaluationContext(list);</span><br><span class="line">List&lt;Integer&gt; great4List = (List&lt;Integer&gt;) parser.parseExpression(&quot;?[#this&gt;4]&quot;)</span><br><span class="line">        .getValue(listContext);</span><br><span class="line">System.out.println(&quot;great4List:&quot; + great4List);</span><br><span class="line"></span><br><span class="line">//获取匹配元素中的第一个值</span><br><span class="line">Integer first = (Integer) parser.parseExpression(&quot;^[#this&gt;2]&quot;)</span><br><span class="line">        .getValue(listContext);</span><br><span class="line">System.out.println(&quot;first:&quot; + first);</span><br><span class="line"></span><br><span class="line">//获取匹配元素中的最后一个值</span><br><span class="line">Integer end = (Integer) parser.parseExpression(&quot;$[#this&gt;2]&quot;)</span><br><span class="line">        .getValue(listContext);</span><br><span class="line">System.out.println(&quot;end:&quot; + end);</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>list:[3, 4, 5]<br>great4List:[5]<br>first:3<br>end:5</p></blockquote><p>对于 List 和 Set ，是针对集合中的每一个元素进行比较的；而对于 Map，则可以指定是元素的键（key）还是元素的值进行比较的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//过滤 Map</span><br><span class="line">Map&lt;String, Double&gt; rank = new HashMap&lt;&gt;();</span><br><span class="line">rank.put(&quot;Deniro&quot;, 96.5);</span><br><span class="line">rank.put(&quot;Jack&quot;, 85.3);</span><br><span class="line">rank.put(&quot;Lily&quot;, 91.1);</span><br><span class="line">context.setVariable(&quot;Rank&quot;, rank);</span><br><span class="line"></span><br><span class="line">//value 大于 90</span><br><span class="line">Map&lt;String,Double&gt; rankGreat95= (Map&lt;String, Double&gt;) parser.parseExpression</span><br><span class="line">        (&quot;#Rank.?[value&gt;90]&quot;).getValue(context);</span><br><span class="line">System.out.println(&quot;rankGreat95:&quot; + rankGreat95);</span><br><span class="line"></span><br><span class="line">//key 按字母顺序，排在 L 后面</span><br><span class="line">Map&lt;String,Double&gt; afterL= (Map&lt;String, Double&gt;) parser.parseExpression</span><br><span class="line">        (&quot;#Rank.?[key&gt;&apos;L&apos;]&quot;).getValue(context);</span><br><span class="line">System.out.println(&quot;afterL:&quot;+afterL);</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>rankGreat95:{Deniro=96.5, Lily=91.1}<br>nameOrder:{Lily=91.1}</p></blockquote><h1 id="14-集合元素布尔判断"><a href="#14-集合元素布尔判断" class="headerlink" title="14 集合元素布尔判断"></a>14 集合元素布尔判断</h1><p>通过表达式 <code>![projectionExpression]</code>，我们可以判断集合中每一个元素是否符合表达式规则。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List list = (List) parser.parseExpression(&quot;&#123;3,4,5&#125;&quot;).getValue();</span><br><span class="line">System.out.println(&quot;list:&quot; + list);</span><br><span class="line">   List&lt;Boolean&gt; isgreat4=(List&lt;Boolean&gt;)parser.parseExpression(&quot;![#this&gt;3]&quot;)</span><br><span class="line">        .getValue(list);</span><br><span class="line">System.out.println(&quot;isgreat4:&quot; + isgreat4);</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>isgreat4:[false, true, true]</p></blockquote><p>也可以对 Map 对象进行类似判断。</p><blockquote><p>原文地址 <a href="https://www.jianshu.com/p/5537b2c86acd" target="_blank" rel="noopener">https://www.jianshu.com/p/5537b2c86acd</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SPEL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot @ConfigurationProperties and @value</title>
      <link href="/2019/07/28/20190728-SpringBoot-ConfigurationProperties-and-Value/"/>
      <url>/2019/07/28/20190728-SpringBoot-ConfigurationProperties-and-Value/</url>
      
        <content type="html"><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h3><p>SpringBoot 使用一个全局的配置文件，配置文件名是固定的；当我们创建一个项目时会在 resource 目录下出现一个默认的配置文件<code>application.properties</code> 我们可以在里面进行一些参数的配置，当然还有另外一种方式 yml 文件<code>application.yml</code>（YAML Ain’t Markup Language）, 他们之间写法不同，作用都是一样的，下面我们就来进行学习，可以根据自己的爱好进行选择。</p><p>配置文件的作用：修改 SpringBoot 自动配置的默认值；SpringBoot 在底层都给我们自动配置好；</p><p>我们写一个简单的例子看看它们之间的区别：配置端口号</p><ul><li>application.properties</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=8081</span><br></pre></td></tr></table></figure><ul><li>application.yaml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure><p>那如果是以前的 xml 呢？</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以前的配置文件；大多都使用的是 <strong>xxxx.xml</strong> 文件；而 YAML：<strong>以数据为中心</strong>，比 json、xml 等更适合做配置文件；但是刚开始使用的时候一定要注意语法问题，一不小心少个空格就会报错哈。</p><h3 id="2-YML-语法"><a href="#2-YML-语法" class="headerlink" title="2 YML 语法"></a>2 YML 语法</h3><h5 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h5><p>k:(空格)v：表示一对键值对 <strong>（空格必须有）</strong>；</p><p>以<strong>空格</strong>的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的，空格可以是一个或者多个，但是同一层级一定要对齐。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure><p><strong>属性和值也是大小写敏感；</strong></p><h5 id="2、值的写法"><a href="#2、值的写法" class="headerlink" title="2、值的写法"></a>2、值的写法</h5><h5 id="字面量：普通的值（数字，字符串，布尔）"><a href="#字面量：普通的值（数字，字符串，布尔）" class="headerlink" title="字面量：普通的值（数字，字符串，布尔）"></a>字面量：普通的值（数字，字符串，布尔）</h5><p> k: v：字面直接来写；</p><p>字符串默认不用加上单引号或者双引号；</p><ul><li><p>“”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思<br>name: “zhangsan \n lisi”：输出；zhangsan 换行 lisi</p></li><li><p>‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据<br>name: ‘zhangsan \n lisi’：输出；zhangsan \n lisi</p></li></ul><h5 id="对象、Map（属性和值）（键值对）："><a href="#对象、Map（属性和值）（键值对）：" class="headerlink" title="对象、Map（属性和值）（键值对）："></a>对象、Map（属性和值）（键值对）：</h5><p> k: v：在下一行来写对象的属性和值的关系；注意缩进</p><p> 对象还是 k: v 的方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>行内写法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span> <span class="string">&#123;name:</span> <span class="string">zhangsan,age:</span> <span class="number">18</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="数组（List、Set）："><a href="#数组（List、Set）：" class="headerlink" title="数组（List、Set）："></a>数组（List、Set）：</h5><p>用 - 值表示数组中的一个元素</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">cat</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">dog</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span> <span class="string">[cat,dog,pig]</span></span><br></pre></td></tr></table></figure><h3 id="3-通过配置文件注入属性-ConfigurationProperties"><a href="#3-通过配置文件注入属性-ConfigurationProperties" class="headerlink" title="3 通过配置文件注入属性 @ConfigurationProperties"></a>3 通过配置文件注入属性 @ConfigurationProperties</h3><ul><li>person 实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.zhangyu.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment"> *      prefix = "person"：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；</span></span><br><span class="line"><span class="comment"> * 所以配置<span class="doctag">@Component</span>注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//人的属性</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//map</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String , Object&gt; maps;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//list</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Dog&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getMaps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaps</span><span class="params">(Map&lt;String, Object&gt; maps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maps = maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dog&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;Dog&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDog</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">" + name + '\'' +</span></span><br><span class="line"><span class="string">                "</span>, age=<span class="string">" + age +</span></span><br><span class="line"><span class="string">                "</span>, sex=<span class="string">'" + sex + '</span>\<span class="string">''</span> +</span><br><span class="line">                <span class="string">", maps="</span> + maps +</span><br><span class="line">                <span class="string">", list="</span> + list +</span><br><span class="line">                <span class="string">", dog="</span> + dog +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Dog 实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.zhangyu.bean;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Dog&#123;"</span> +</span><br><span class="line">                <span class="string">" + name + '\'' +</span></span><br><span class="line"><span class="string">                "</span>, age=<span class="string">" + age +</span></span><br><span class="line"><span class="string">                '&#125;';</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>yml 配置属性</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">zhangsan</span></span><br><span class="line"><span class="attr">  age:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">  sex:</span> <span class="string">male</span></span><br><span class="line"><span class="attr">  maps:</span> <span class="string">&#123;k1:</span> <span class="string">v1,k2:</span> <span class="string">v2&#125;</span></span><br><span class="line"><span class="attr">  list:</span></span><br><span class="line"><span class="bullet">   -</span> <span class="string">&#123;name:</span> <span class="string">小黑,</span> <span class="attr">age:</span> <span class="number">22</span><span class="string">&#125;</span></span><br><span class="line"><span class="attr">   - name:</span> <span class="string">小白</span></span><br><span class="line"><span class="attr">   - age:</span> <span class="number">33</span></span><br><span class="line"><span class="attr">  dog:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">大黄</span></span><br><span class="line"><span class="attr">    age:</span> <span class="number">12</span></span><br></pre></td></tr></table></figure><ul><li>下面通过 test 类进行测试结果</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.zhangyu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.zhangyu.bean.Person;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Springboot1ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(person);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果</strong> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person&#123;name=<span class="string">'zhangsan'</span>, age=<span class="number">20</span>, sex=<span class="string">'male'</span>, maps=&#123;k1=v1, k2=v2&#125;, list=[Dog&#123;name=<span class="string">'小黑'</span>, age=<span class="number">22</span>&#125;, Dog&#123;name=<span class="string">'小白'</span>, age=<span class="number">0</span>&#125;, Dog&#123;name=<span class="string">'null'</span>, age=<span class="number">33</span>&#125;], dog=Dog&#123;name=<span class="string">'大黄'</span>, age=<span class="number">12</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>其中 list 中放入的是 dog 类，我们看看结果是什么样的：list 张放入了三只狗，dog 中如果有多个属性就要用 { } 括起来。</p><ul><li>properties 配置文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">person.name=小明</span><br><span class="line">person.age=20</span><br><span class="line">person.sex=male</span><br><span class="line"></span><br><span class="line">person.maps.k1=v1</span><br><span class="line">person.maps.k2=v2</span><br><span class="line"></span><br><span class="line">person.list[0].name=小顾</span><br><span class="line">person.list[0].age=22</span><br><span class="line"></span><br><span class="line">person.list[1].name=旺财</span><br><span class="line">person.list[1].age=10</span><br><span class="line"></span><br><span class="line">person.dog.name=旺旺</span><br><span class="line">person.dog.age=30</span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person&#123;name=<span class="string">'小明'</span>, age=<span class="number">20</span>, sex=<span class="string">'male'</span>, maps=&#123;k1=v1, k2=v2&#125;, list=[Dog&#123;name=<span class="string">'小顾'</span>, age=<span class="number">22</span>&#125;, Dog&#123;name=<span class="string">'旺财'</span>, age=<span class="number">10</span>&#125;], dog=Dog&#123;name=<span class="string">'旺旺'</span>, age=<span class="number">30</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 这里大家可能出现乱码问题因为 properties 配置文件在 idea 中默认 utf-8 可能会乱码，但是我们 idea 的默认设置是 gbk，所以要进行修改，如下图所示：<br><img src="https://img-blog.csdnimg.cn/20181105162035183.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1MF96aGFuZzA=,size_16,color_FFFFFF,t_70" alt></p><h3 id="3-Value-属性注入"><a href="#3-Value-属性注入" class="headerlink" title="3 @Value 属性注入"></a>3 @Value 属性注入</h3><p>我们写个简单的 controller 进行测试 @Value 属性，@Value 属性可以说增加了属性注入的灵活性可以单个属性进行配置。</p><ul><li>HelloController</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.zhangyu.bean.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;person.name&#125;"</span>)</span><br><span class="line">    <span class="comment">//@Value("#&#123;person.name&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算表达式</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;11*2&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//引入一个对象</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;person&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET ,path = <span class="string">"/sayHello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello "</span>+ name+<span class="string">" 我的年龄是： "</span>+age+<span class="string">"\n"</span> + person;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>yml 中加一个 name 属性</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">person.name:</span> <span class="string">小雨</span></span><br></pre></td></tr></table></figure><ul><li>看看结果<br>访问页面<code>http://localhost:8081/sayHello</code>我这里端口号配置的是 8081<br>结果:<code>hello 小明 我的年龄是： 22</code></li></ul><p><strong>这里 @Value 注解是支持 SpEL 的。</strong></p><h5 id="什么是-SpEL？"><a href="#什么是-SpEL？" class="headerlink" title="什么是 SpEL？"></a>什么是 SpEL？</h5><ol><li><p>Spring Expression Language (简称 SpEL)：是一个支持运行时查询和操作对象图的强大的表达式语言。</p></li><li><p>语法类似于 EL：SpEL 使用 #{…} 作为定界符 , 所有在大括号中的字符都将被认为是 SpEL , SpEL 为 bean 的属性进行动态赋值提供了便利。</p></li></ol><p>通过 SpEL 可以实现：</p><ul><li>通过 bean 的 id 对 bean 进行引用</li><li>调用方式以及引用对象中的属性</li><li>计算表达式的值</li><li>正则表达式的匹配</li></ul><h5 id="1SpEL-实现："><a href="#1SpEL-实现：" class="headerlink" title="1SpEL 实现："></a>1SpEL 实现：</h5><ul><li>整数：#{8}</li><li>小数：#{8.8}</li><li>科学计数法：#{1e4}</li><li>String：可以使用单引号或者双引号作为字符串的定界符号。</li><li>Boolean：#{true}</li></ul><p>SpEL引用bean , 属性和方法：</p><ul><li><p>引用其他对象:#{car}</p></li><li><p>引用其他对象的属性：#{car.brand}</p></li><li><p>调用其它方法 , 还可以链式操作：#{car.toString()}</p></li><li><p>调用静态方法静态属性：#{T(java.lang.Math).PI}</p><p>SpEL支持的运算符号：</p></li><li><p>算术运算符：+，-，*，/，%，^(加号还可以用作字符串连接)</p></li><li><p>比较运算符：&lt; , &gt; , == , &gt;= , &lt;= , lt , gt , eg , le , ge</p></li><li><p>逻辑运算符：and , or , not , |</p></li><li><p>if-else 运算符(类似三目运算符)：？:(temary), ?:(Elvis)</p></li><li><p>正则表达式：#{admin.email matches ‘[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}’}</p></li></ul><h3 id="4-Value-获取值和-ConfigurationProperties-获取值比较"><a href="#4-Value-获取值和-ConfigurationProperties-获取值比较" class="headerlink" title="4 @Value 获取值和 @ConfigurationProperties 获取值比较"></a>4 @Value 获取值和 @ConfigurationProperties 获取值比较</h3><table><thead><tr><th>注解</th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个指定</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303 数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><p><strong>松散绑定</strong> ：如果使用 @ConfigurationProperties 注解一个类其中一个属性为<br><code>private String myName;</code><br>我们通过 yml 进行配置如果我写成这样是否可以呢？</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="attr">  my-name:</span> <span class="string">zhangsan</span></span><br></pre></td></tr></table></figure><p>答案是可以的，<strong>这就是松散绑定</strong> ，我可以写成<code>my-name</code>也可以<code>myName</code><br>@ConfigurationProperties 支持而 @Vlaue 不支持</p><p><strong>JSR303 数据校验</strong>：  通过一个例子来看看什么是 JSR303 数据校验</p><ul><li>我们在 person 类中加入:<code>@Validated</code>和<code>@Email</code>两个注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.zhangyu.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Email;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//人的属性</span></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="keyword">private</span> String myName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//map</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String , Object&gt; maps;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//list</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Dog&gt; list;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMyName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> myName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyName</span><span class="params">(String myName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myName = myName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getMaps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> maps;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaps</span><span class="params">(Map&lt;String, Object&gt; maps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maps = maps;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dog&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;Dog&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDog</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"my + myName + '\'' +</span></span><br><span class="line"><span class="string">                "</span>, age=<span class="string">" + age +</span></span><br><span class="line"><span class="string">                "</span>, sex=<span class="string">'" + sex + '</span>\<span class="string">''</span> +</span><br><span class="line">                <span class="string">", maps="</span> + maps +</span><br><span class="line">                <span class="string">", list="</span> + list +</span><br><span class="line">                <span class="string">", dog="</span> + dog +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动后发现报错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Binding to target org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under <span class="string">'person'</span> to cn.zhangyu.bean.Person failed:</span><br><span class="line"></span><br><span class="line">    Property: person.myName</span><br><span class="line">    Value: zhangsan</span><br><span class="line">    Origin: class path resource [application.yml]:6:12</span><br><span class="line">    Reason: 不是一个合法的电子邮件地址</span><br></pre></td></tr></table></figure><p>这也就是 JSR303 数据校验。填写正确的电子邮件。而 @Vlaue 是不支持的。</p><p><strong>复杂类型：</strong><br>我们上面知道了 @ConfigurationProperties 是支持复杂类型的 list、map 等。 现在我们测试 @Value 是否支持</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;person.maps&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> Map&lt;String , Object&gt; maps;</span><br></pre></td></tr></table></figure><p>把 person 中 map 属性加上 @Value 注解启动发现报错;<br><code>Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder &#39;person.maps&#39; in value &quot;${person.maps}&quot;</code>. <strong>所以 @ConfigurationProperties 是支持复杂类型的 list、map 等而 @Value 是不支持的，这是非常重要的一点。</strong></p><blockquote><p>Learning notes<br>原文地址 <a href="https://blog.csdn.net/yu0_zhang0/article/details/83745056" target="_blank" rel="noopener">https://blog.csdn.net/yu0_zhang0/article/details/83745056</a> </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Annotation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2.X整合Oauth2访问时返回401 </title>
      <link href="/2019/07/21/20190721-SpringBoot-integration-Oauth2-Return-401-on-login-%E2%80%9C/"/>
      <url>/2019/07/21/20190721-SpringBoot-integration-Oauth2-Return-401-on-login-%E2%80%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="QUESTION"><a href="#QUESTION" class="headerlink" title="QUESTION"></a>QUESTION</h1><p>SpringBoot2.X整合了Oauth2访问<code>/oauth/token</code>时出现返回401 Unauthorized</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"timestamp"</span>: <span class="string">"2019-07-21T15:22:06.576+0000"</span>,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">401</span>,</span><br><span class="line">    <span class="attr">"error"</span>: <span class="string">"Unauthorized"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"Unauthorized"</span>,</span><br><span class="line">    <span class="attr">"path"</span>: <span class="string">"/oauth/token"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且Console打印<code>Encoded password does not look like BCrypt</code></p><h1 id="ANSWER"><a href="#ANSWER" class="headerlink" title="ANSWER"></a>ANSWER</h1><p>SpringBoot2.X中在设置ClientSecret时需要加密<code>secret(passwordEncoder.encode(client.getClientSecret()))</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    InMemoryClientDetailsServiceBuilder builder = clients.inMemory();</span><br><span class="line">    <span class="keyword">if</span> (ArrayUtils.isNotEmpty(securityProperties.getOauth2().getClients())) &#123;</span><br><span class="line">        <span class="keyword">for</span> (OAuth2ClientProperties client : securityProperties.getOauth2().getClients()) &#123;</span><br><span class="line">            builder.withClient(client.getClientId())</span><br><span class="line">                    .secret(passwordEncoder.encode(client.getClientSecret()))</span><br><span class="line">                    .authorizedGrantTypes(<span class="string">"refresh_token"</span>, <span class="string">"authorization_code"</span>, <span class="string">"password"</span>)</span><br><span class="line">                    .accessTokenValiditySeconds(client.getAccessTokenValidateSeconds())</span><br><span class="line">                    .refreshTokenValiditySeconds(<span class="number">2592000</span>)</span><br><span class="line">                    .scopes(<span class="string">"all"</span>)</span><br><span class="line">                    .autoApprove(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2.X </category>
          
          <category> Oauth2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2.X </tag>
            
            <tag> Oauth2 </tag>
            
            <tag> Unauthorized </tag>
            
            <tag> 401 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2.x integration swagger2</title>
      <link href="/2019/07/21/20190721-SpringBoot%20integration%20swagger2/"/>
      <url>/2019/07/21/20190721-SpringBoot%20integration%20swagger2/</url>
      
        <content type="html"><![CDATA[<h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><ul><li>SpingBoot使用的是<code>2.0.7RELEASE</code>版本</li></ul><h1 id="一、配置POM文件"><a href="#一、配置POM文件" class="headerlink" title="一、配置POM文件"></a>一、配置POM文件</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="二、配置Swagger2"><a href="#二、配置Swagger2" class="headerlink" title="二、配置Swagger2"></a>二、配置Swagger2</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Swagger配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConf</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">// 扫描有ApiOperation注解的</span></span><br><span class="line">                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class)) </span><br><span class="line">                <span class="comment">// 扫描固定包</span></span><br><span class="line">                <span class="comment">// .apis(RequestHandlerSelectors.basePackage("com.xxx.controller"))</span></span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"Swagger2 Test API"</span>)</span><br><span class="line">                .version(<span class="string">"summer"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、Controller请求添加Swagger2"><a href="#三、Controller请求添加Swagger2" class="headerlink" title="三、Controller请求添加Swagger2"></a>三、Controller请求添加Swagger2</h1><h1 id="四、访问SwaggerUI"><a href="#四、访问SwaggerUI" class="headerlink" title="四、访问SwaggerUI"></a>四、访问SwaggerUI</h1><ul><li><p>访问路径<code>http://IP:端口/swagger-ui.html</code>会出现404无法读取到静态资源，控制台显示<code>No mapping found for HTTP request with URI [/swagger-ui.html] in DispatcherServlet with name &#39;dispatcherServlet&#39;</code></p></li><li><p>Spring-boot2.X以上在集成swagger时配置WebConfig不要extends WebMvcConfigurationSupport，需要修改为最新的implements WebMvcConfigurer然后配置静态资源访问的路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomConfiguration</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置静态资源访问路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/**"</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">"classpath:/static/"</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">"swagger-ui.html"</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">"classpath:/META-INF/resources/"</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/webjars/**"</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2.x </category>
          
          <category> Swagger2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2.X </tag>
            
            <tag> Swagger2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NGINX add http_secure_link_module</title>
      <link href="/2019/07/06/20190706-NGINX-http-secure-link-module/"/>
      <url>/2019/07/06/20190706-NGINX-http-secure-link-module/</url>
      
        <content type="html"><![CDATA[<h1 id="NGINX的http-secure-link-module简单使用"><a href="#NGINX的http-secure-link-module简单使用" class="headerlink" title="NGINX的http_secure_link_module简单使用"></a>NGINX的http_secure_link_module简单使用</h1><p>环境说明：</p><ul><li>nginx安装目录<code>/usr/local/nginx</code></li><li>nginx编译安装的源码路径<code>/opt/nginx-1.16.0</code></li></ul><h2 id="一、查看已安装的NGINX配置信息"><a href="#一、查看已安装的NGINX配置信息" class="headerlink" title="一、查看已安装的NGINX配置信息"></a>一、查看已安装的NGINX配置信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -V</span><br></pre></td></tr></table></figure><p><img src="http://src.clili.top/img/20190706191013.png" alt></p><p>​    复制保存configre arguments：中的内容<code>--prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre</code></p><h2 id="二、停止正在运行的NGINX"><a href="#二、停止正在运行的NGINX" class="headerlink" title="二、停止正在运行的NGINX"></a>二、停止正在运行的NGINX</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s stop</span><br></pre></td></tr></table></figure><h2 id="三、备份NGINX"><a href="#三、备份NGINX" class="headerlink" title="三、备份NGINX"></a>三、备份NGINX</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /usr/<span class="built_in">local</span>/nginx/sbin/nginx /usr/<span class="built_in">local</span>/nginx/sbin/nginx.bak</span><br></pre></td></tr></table></figure><h2 id="四、编译前的配置"><a href="#四、编译前的配置" class="headerlink" title="四、编译前的配置"></a>四、编译前的配置</h2><p>​    在nginx源码目录下配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/nginx-1.16.0</span><br><span class="line">./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre --with-http_secure_link_module</span><br></pre></td></tr></table></figure><ul><li><code>./configure</code>后面的内容为上文复制保存的nginx配置信息，然后再补充<code>--with-http_secure_link_module</code></li></ul><h2 id="五、编译与拷贝"><a href="#五、编译与拷贝" class="headerlink" title="五、编译与拷贝"></a>五、编译与拷贝</h2><ul><li>使用<code>make</code>重新编译nginx，如果使用<code>make install</code>会替换掉<code>/usr/local/nginx</code>目录下的nginx</li><li>将<code>/opt/nginx-1.16.0/objs/nginx</code>目录下编译好的内容拷贝到<code>/usr/local/nginx/sbin/</code>目录下</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">cp /opt/nginx-1.16.0/objs/nginx /usr/local/nginx/sbin/</span><br></pre></td></tr></table></figure><h2 id="六、启动nginx并访问"><a href="#六、启动nginx并访问" class="headerlink" title="六、启动nginx并访问"></a>六、启动nginx并访问</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><ul><li><p>使用<code>ps -ef|grep nginx</code>命令查看启动成功</p><p><img src="http://src.clili.top/img/20190706191445.png" alt></p></li><li><p>使用<code>curl -v localhost</code> 查看可以访问</p><p><img src="http://src.clili.top/img/20190706191600.png" alt></p></li></ul><h2 id="七、配置ngx-http-secure-link-module"><a href="#七、配置ngx-http-secure-link-module" class="headerlink" title="七、配置ngx_http_secure_link_module"></a>七、配置ngx_http_secure_link_module</h2><p>​    配置nginx.conf文件，具体配置信息参看<a href="https://nginx.org/en/docs/http/ngx_http_secure_link_module.html" target="_blank" rel="noopener">Module ngx_http_secure_link_module</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        location /file/ &#123;</span><br><span class="line">            </span><br><span class="line">             secure_link $arg_token,$arg_expires;</span><br><span class="line">             secure_link_md5 "testSecret$secure_link_expires$uri";</span><br><span class="line"></span><br><span class="line">             if ($secure_link = "") &#123;</span><br><span class="line">                return 403;</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             if ($secure_link = "0") &#123;</span><br><span class="line">                return 410;</span><br><span class="line">             &#125;</span><br><span class="line">             </span><br><span class="line">             alias /opt/;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><p>/opt/路径下有secure.txt文件</p></li><li><p>原始文件的访问路径<a href="http://localhost/file/secure.txt" target="_blank" rel="noopener">http://localhost/file/secure.txt</a></p></li><li><p>使用安全<strong>ngx_http_secure_link_module</strong>的访问路径<a href="http://localhost/file/secure.txt?token=tgcX_v7FC6ivgXq75jJHYw&amp;expires=1562403799" target="_blank" rel="noopener">http://localhost/file/secure.txt?token=tgcX_v7FC6ivgXq75jJHYw&amp;expires=1562403799</a></p></li><li><p><code>&quot;testSecret$secure_link_expires$uri&quot;</code>中的<code>testSecret</code>自己配置，与生成请求URL中的secret要一致</p></li><li><p>URL中的token对应<code>$arg_token</code>,expires对应<code>$arg_expires</code></p></li></ul><p>检查配置文件的正确性并重新加载nginx.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx  -t -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line">/usr/local/nginx/sbin/nginx  -s reload</span><br></pre></td></tr></table></figure><h2 id="八、JAVA版生成访问URL"><a href="#八、JAVA版生成访问URL" class="headerlink" title="八、JAVA版生成访问URL"></a>八、JAVA版生成访问URL</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> url 资源的相对路径 如果请求路径为http://localhost/file/secure.txt 相对路径为/file/secure.txt</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> seconds URL的有效期秒数</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> secret 密签与nginx中配置的一致</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateToken</span><span class="params">(String url, Long seconds, String secret)</span></span>&#123;</span><br><span class="line">      <span class="comment">// 设置过期时间秒数</span></span><br><span class="line">      String time = String.valueOf(System.currentTimeMillis() / <span class="number">1000</span> + seconds);</span><br><span class="line">      <span class="comment">// 生成MD5校验码 字符串拼接的顺序要和nginx中配置的校验顺序一致 secret+time+url</span></span><br><span class="line">      <span class="keyword">byte</span>[] md5Str=DigestUtils.md5(StringUtils.join(secret,time,url));</span><br><span class="line">      String token= Base64.encodeBase64URLSafeString(md5Str);</span><br><span class="line">      <span class="keyword">return</span> StringUtils.join(url,TokenPrefix,token,ExpiresPrefix,time);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      String urlToken=generateToken(<span class="string">"/file/secure.txt"</span>,<span class="number">2L</span>,<span class="string">"testSecret"</span>);</span><br><span class="line">      System.out.println(<span class="string">"http://localhost"</span>+urlToken);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><code>byte[] md5Str=DigestUtils.md5(StringUtils.join(secret,time,url));</code>这里的<code>(secret,time,url)</code>的拼接顺序一定要和nginx.conf文件中的<code>secure_link_md5 &quot;testSecret$secure_link_expires$uri&quot;;</code>顺序一致</li><li>参数<code>url</code>是请求资源的相对路径 如果请求路径为<a href="http://localhost/file/secure.txt" target="_blank" rel="noopener">http://localhost/file/secure.txt</a> 相对路径为/file/secure.txt</li><li>参数<code>seconds</code>请求URL的有效期秒数</li><li>参数<code>secret</code>密签与nginx中配置的一致</li></ul><p>然后就可以访问啦！！！</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Install NGINX</title>
      <link href="/2019/07/06/20190706-NGINX-install%20nginx/"/>
      <url>/2019/07/06/20190706-NGINX-install%20nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="安装NGINX"><a href="#安装NGINX" class="headerlink" title="安装NGINX"></a>安装NGINX</h1><p>安装环境</p><ul><li>CentOS 7</li><li>NGINX-1.16.0</li></ul><h2 id="安装NGINX所需环境"><a href="#安装NGINX所需环境" class="headerlink" title="安装NGINX所需环境"></a>安装NGINX所需环境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel</span><br></pre></td></tr></table></figure><h2 id="安装NGINX-1"><a href="#安装NGINX-1" class="headerlink" title="安装NGINX"></a>安装NGINX</h2><p>一、下载nginx压缩包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://nginx.org/download/nginx-1.16.0.tar.gz</span><br></pre></td></tr></table></figure><p>二、解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.16.0.tar.gz</span><br></pre></td></tr></table></figure><p>三、进入解压之后的nginx文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd  nginx-1.16.0</span><br></pre></td></tr></table></figure><p>四、编译前的配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx  --with-http_stub_status_module --with-http_ssl_module --with-pcre</span><br></pre></td></tr></table></figure><ul><li><p><code>--prefix=/usr/local/nginx</code>指定NGINX安装到 /usr/local/nginx 目录下</p></li><li><p><code>--with-http-XXX</code>为nginx的模块，根据业务需求安装对应的模块</p><p>具体配置参看nginx官网的<a href="https://nginx.org/en/docs/configure.html" target="_blank" rel="noopener">Building nginx from Sources</a></p></li></ul><p>五、编译并安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>六、查看安装的nginx信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -V</span><br></pre></td></tr></table></figure><p><img src="http://src.clili.top/img/20190706191013.png" alt></p><p>七、启动nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><p>八、查看nginx是否启动</p><ul><li><p>使用<code>ps -ef|grep nginx</code>命令查看</p><p><img src="http://src.clili.top/img/20190706191445.png" alt></p></li><li><p>使用<code>curl -v localhost</code> 查看</p><p><img src="http://src.clili.top/img/20190706191600.png" alt></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chinese display scrambling in internationalized files</title>
      <link href="/2019/06/30/20190630-SpringBoot-Chinese%20display%20scrambling%20in%20internationalized%20files/"/>
      <url>/2019/06/30/20190630-SpringBoot-Chinese%20display%20scrambling%20in%20internationalized%20files/</url>
      
        <content type="html"><![CDATA[<h3 id="Question：SpringBoot中国际化Message的Properties文件中文显示乱码"><a href="#Question：SpringBoot中国际化Message的Properties文件中文显示乱码" class="headerlink" title="Question：SpringBoot中国际化Message的Properties文件中文显示乱码"></a>Question：SpringBoot中国际化Message的Properties文件中文显示乱码</h3><p><img src="http://src.clili.top/img/20190630173322.png" alt></p><h3 id="Solution："><a href="#Solution：" class="headerlink" title="Solution："></a>Solution：</h3><ul><li><p>如果使用的是Idea则设置Editor-File Encodings中的文件编码，如下图</p><p><img src="http://src.clili.top/img/20190630173734.png" alt></p></li></ul><p>⚠️文件编码改为UTF-8并要勾选Transparent native-to-ascli conversion选项</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> i18n </tag>
            
            <tag> Internationalized </tag>
            
            <tag> Garbled </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github repository configuration domain</title>
      <link href="/2019/06/26/20190626-Github-repository-configuration-domain/"/>
      <url>/2019/06/26/20190626-Github-repository-configuration-domain/</url>
      
        <content type="html"><![CDATA[<h1 id="如何给GitHub的仓库配置域名通过域名访问？"><a href="#如何给GitHub的仓库配置域名通过域名访问？" class="headerlink" title="如何给GitHub的仓库配置域名通过域名访问？"></a>如何给GitHub的仓库配置域名通过域名访问？</h1><h2 id="一、域名解析"><a href="#一、域名解析" class="headerlink" title="一、域名解析"></a>一、域名解析</h2><ul><li>使用阿里云的域名解析将域名指向到Github</li></ul><p><img src="http://src.clili.top/img/20190626135336.png" alt></p><h2 id="二、GitHub仓库中配置要绑定的域名"><a href="#二、GitHub仓库中配置要绑定的域名" class="headerlink" title="二、GitHub仓库中配置要绑定的域名"></a>二、GitHub仓库中配置要绑定的域名</h2><ul><li>打开GitHub需要绑定域名的仓库</li><li>进入仓库的Settings</li><li>选择分支并设置域名</li></ul><p><img src="http://src.clili.top/img/20190626135817.png" alt></p><h2 id="可以访问了！"><a href="#可以访问了！" class="headerlink" title="可以访问了！"></a>可以访问了！</h2>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Domain </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Close FOREIGN_KEY_CHECKS when MySQL import</title>
      <link href="/2019/06/24/20190624-MySQL-Close-FOREIGN-KEY-CHECKS-when-mysql-import/"/>
      <url>/2019/06/24/20190624-MySQL-Close-FOREIGN-KEY-CHECKS-when-mysql-import/</url>
      
        <content type="html"><![CDATA[<ul><li><p>MySQL导入数据库时先关闭外键约束检测，导入完成后再打开外键约束检测</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE `DATA_BASE_NAME` DEFAULT CHARACTER SET utf8;</span><br><span class="line"></span><br><span class="line">USE `DATA_BASE_NAME`;</span><br><span class="line"></span><br><span class="line">-- CLOSE FOREIGN_KEY_CHECKS --</span><br><span class="line">SET FOREIGN_KEY_CHECKS=0;</span><br><span class="line"></span><br><span class="line">-- ----------------</span><br><span class="line">-- Table structure </span><br><span class="line">-- ----------------</span><br><span class="line"></span><br><span class="line">-- OPEN FOREIGN_KEY_CHECKS --</span><br><span class="line">SET FOREIGN_KEY_CHECKS=1;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Method of calling other scripts</title>
      <link href="/2019/06/19/20190619-Unity-Method%20of%20calling%20other%20scripts/"/>
      <url>/2019/06/19/20190619-Unity-Method%20of%20calling%20other%20scripts/</url>
      
        <content type="html"><![CDATA[<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><ol><li><p>在A脚本中定义物体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public GameObject bObj;</span><br></pre></td></tr></table></figure></li><li><p>在unity中将被调用脚本B所挂载的物体拖到<code>bObj</code>中</p></li><li><p>A脚本中使用<code>GetComponent&lt;&gt;</code>方法调用脚本B中的<code>Reward</code>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bObj.GetComponent&lt;B&gt;().Reward()</span><br></pre></td></tr></table></figure></li></ol><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><ol><li><p>定义静态变量 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static GameManager Instance &#123; get; private set; &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Awake()</code> 赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void Awake()</span><br><span class="line">&#123;</span><br><span class="line">    if (Instance == null)</span><br><span class="line">    &#123;</span><br><span class="line">        Instance = this;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        Destroy(Instance.gameObject);</span><br><span class="line">        Instance = this;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>OnDestroy()</code> 赋值为 <code>null</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void OnDestroy()</span><br><span class="line">&#123;</span><br><span class="line">    if (Instance == this</span><br><span class="line">    &#123;</span><br><span class="line">        Instance = null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Scripts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/06/15/hello-world/"/>
      <url>/2019/06/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
